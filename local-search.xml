<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算广告：互联网商业变现的市场与技术</title>
    <link href="/2024/05/08/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A%EF%BC%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%95%86%E4%B8%9A%E5%8F%98%E7%8E%B0%E7%9A%84%E5%B8%82%E5%9C%BA%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    <url>/2024/05/08/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A%EF%BC%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%95%86%E4%B8%9A%E5%8F%98%E7%8E%B0%E7%9A%84%E5%B8%82%E5%9C%BA%E4%B8%8E%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p>一切付费的信息、产品或服务的传播渠道，都是广告——广告主通过媒体达到低成本的用户接触；而计算广告的核心问题是为一系列用户和上下文的组合找到最合适的广告投放策略以优化整体广告活动的利润。</p><span id="more"></span><h1>历史</h1><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-08T11:40:31-yrdmgyeg.png" alt=""></p><ul><li><p>演化路径：品牌广告 vs 效果广告</p><ul><li><p>定向技术和交易形式：从最初的固定位置合约交易发展到进行受众定向、按展示量结算的合约交易，再到竞价交易方式，并最终发展成开放的实时竞价交易市场。</p></li><li><p>产品展现逻辑：广告位&amp;内容 -&gt; 原生广告。</p></li></ul></li><li><p>结算方式</p></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-08T10:31:56-pimpzfsq.png" alt="2024-05-08T10:31:56-pimpzfsq.png"></p><h1>计算</h1><p>定义：为一系列用户与环境的组合找到最合适的广告投放策略以优化整体广告活动的利润</p><ul><li>主动优化成本：r(revenue) = eCPM(expected Cost Per Mille) = CTR * CV(click value)</li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-08T11:46:33-gvukfuwa.png" alt=""></p><ul><li><p>受众定向：<strong>有价值的数据来源</strong></p><ul><li>广告特征数据&amp;用户画像数据&amp;用户历史行为数据</li></ul></li></ul><p><img src="https://staticcdn1-5.umiwi.com/epms_ebook/b033e879a4463312bd7f35397f5e984b.jpg?x-oss-process=image/resize,w_3440,m_lfit" alt=""></p><ul><li><p>个性化系统</p><ul><li><p>在线分配：量的约束和投放时即时决策</p></li><li><p>市场的机制设计：多方博弈下达到动态平衡</p></li><li><p>点击/转化率预估</p></li><li><p>个性化推荐：实时竞价</p></li></ul></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-08T11:51:18-kimryadx.png" alt=""></p><h1>业界</h1><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-08T11:43:47-lqlruzfl.png" alt=""></p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-08T10:03:53-ishbmxup.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据湖</title>
    <link href="/2024/04/20/%E6%95%B0%E6%8D%AE%E6%B9%96/"/>
    <url>/2024/04/20/%E6%95%B0%E6%8D%AE%E6%B9%96/</url>
    
    <content type="html"><![CDATA[<p>数据湖定义为一个集中式存储，以任意规模存储所有结构化和非机构化数据，但从应用上来说可以用作离线数仓的替代(能力增强)，以及与实时数仓的统一(牺牲一定的实时性)，然而实际的降本增效效果是其大规模应用的障碍。</p><span id="more"></span><h1>WHY</h1><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-25T19:33:29.171947943-bgbxfjba.png" alt="2024-02-25T19:33:29.171947943-bgbxfjba.png"></p><p>历史：数据库(事务) -&gt; 数据仓库(分析) -&gt; 数据湖(非结构化) -&gt; 湖仓一体(统一)</p><ul><li><p>低成本&amp;高可靠性</p></li><li><p>元数据</p></li><li><p>时间旅行</p></li><li><p><strong>更新</strong></p></li></ul><h1>WHAT</h1><p><strong>表格式</strong></p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-04-20T20:25:37-qgcjtpil.png" alt=""></p><h1>HOW</h1><p>三剑客：Delta vs Iceberg vs Hudi</p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-04-20T20:29:18-mkpnsanw.png" alt=""></p><p>后起之秀：Paimon</p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-04-20T20:35:11-ywjqaaqz.png" alt=""></p><h1>USE CASE</h1><ul><li><p>CDC入湖</p></li><li><p>状态外置</p></li><li><p>流批&amp;全增量一体</p></li></ul><h1>OLAP</h1><p>查询加速</p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-04-20T20:34:55-eqgqshds.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI Agent</title>
    <link href="/2024/04/20/AI-Agent/"/>
    <url>/2024/04/20/AI-Agent/</url>
    
    <content type="html"><![CDATA[<p>如何利用大模型的能力来重塑各行各业，AI Agent也许就是其中一个答案~</p><span id="more"></span><h1>WHY</h1><p>大模型应用方式演变：Promot工程 -&gt; RAG -&gt; CoT -&gt; ReAct</p><ul><li><p>只能告诉你怎么做，但不能帮你做</p></li><li><p>出现幻觉，返回错误的信息</p></li><li><p>对最新和专业知识的欠缺</p></li></ul><h1>WHAT</h1><p><a href="https://lilianweng.github.io/posts/2023-06-23-agent/">LLM Powered Autonomous Agents</a></p><p><img src="https://lilianweng.github.io/posts/2023-06-23-agent/agent-overview.png" alt=""></p><h1>HOW</h1><p><a href="https://github.com/e2b-dev/awesome-ai-agents">AI Agents Langdscape</a></p><ul><li><p>单智能体</p></li><li><p>多智能体：<a href="https://github.com/microsoft/autogen">AutoGen</a></p></li><li><p>人&amp;智能体</p></li></ul><p><img src="https://github.com/e2b-dev/awesome-ai-agents/raw/main/assets/landscape-latest.png" alt="Chart of AI Agents Landscape"></p><h1>NEXT</h1><p>AI等级：</p><ul><li><p>L1：tool</p></li><li><p>L2：copilot</p></li><li><p>L3：agent</p></li><li><p>L4：species</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2024/03/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/03/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>机器学习是从有限的观测数据中学习（或“猜测”）出具有一般性的规律，并可以将总结出来的规律推广应用到未观测样本，包含三个基本要素：模型、学习准则、优化算法。</p><span id="more"></span><h1>整体流程</h1><p>问题建模：数据 + 算力 + 算法</p><ol><li><p>明确问题，着眼大局</p></li><li><p>获取数据</p></li><li><p>探索数据以获得洞察力</p></li><li><p>面向机器学习准备数据</p></li><li><p>选择和训练模型</p></li><li><p>微调模型</p></li><li><p>展现解决方案</p></li><li><p>启动、监控、维护系统</p></li></ol><h1>经典模型</h1><ul><li><p>线性回归</p></li><li><p>支持向量机</p></li><li><p>决策树</p></li><li><p>随机森林</p></li><li><p>K-Means</p></li></ul><h1>深度学习</h1><ul><li><p>前馈神经网络</p></li><li><p>卷积神经网络</p></li><li><p>循环神经网络</p></li><li><p>生成模型</p></li><li><p>注意力机制</p></li></ul><h1>强化学习</h1><ul><li><p>值函数</p></li><li><p>策略函数</p></li></ul><h1>应用</h1><ul><li>推荐系统：召回 -&gt; 粗排 -&gt; 精排 -&gt; 重排</li></ul><p><img src="https://pic4.zhimg.com/v2-584d8db40db4ca6526a593d1737e1d3f_r.jpg" alt=""></p><ul><li><p>自然语言处理：Encoder-Only(BERT) vs Decoder-Only(GPT)</p></li><li><p>大模型应用：Langchain</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科学上网</title>
    <link href="/2024/03/16/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2024/03/16/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p>由于众所周知的原因，很多国外网站都访问不了，虽然可以配置国内镜像的方式加速访问，但还是不够通用，本篇文章将介绍一种实现科学上网的方法。</p><span id="more"></span><h1>快速开始</h1><ol><li><p><a href="https://v2sx.com/cart.php">产品购买</a>：</p><ol><li><p>笔者这里购买的是标准版包年，使用优惠码<strong>v2server</strong>可以有20%的折扣：<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-07T21:27:50-nnjstkqr.png" alt=""></p></li><li><p>购买成功后复制订阅地址：<img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-07T21:50:31-jicbiuvi.png" alt=""></p></li></ol></li><li><p>客户端安装：添加订阅地址并更新相应订阅</p><ol><li><p><a href="https://github.com/2dust/v2rayN/releases">Windows客户端</a>：<img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-07T22:06:27-kxpwkcrt.png" alt=""></p></li><li><p><a href="https://github.com/yanue/V2rayU/releases">Mac客户端</a></p></li><li><p><a href="https://github.com/2dust/v2rayNG/releases">Android客户端</a></p></li></ol></li><li><p>访问<a href="https://www.google.com">Google</a>进行验证</p></li></ol><h1>最佳实践</h1><ul><li><p>ChatGPT</p><ul><li><p><a href="https://chatgptzh.github.io/how-to-register-a-chatgpt-account-in-china">虚拟电话号码</a></p></li><li><p><a href="https://www.vpsdawanjia.com/6149.html">虚拟信用卡</a></p></li></ul></li><li><p>环境变量</p><pre><code class="hljs">export ALL_PROXY = socks5://127.0.0.1:10808</code></pre></li></ul><h1>基础原理</h1><p><a href="https://www.v2fly.org/">V2Ray</a>：下一步实现<a href="https://guide.v2fly.org/app/transparent_proxy.html#%E4%BC%98%E7%82%B9">透明代理</a>~<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-08T21:28:49-xijcighm.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>金融经济学</title>
    <link href="/2024/02/11/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/11/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>金融处理的是金融资产在不同主体之间的分配，而时间和不确定性是金融活动两个不可缺少的维度，<a href="https://finaecon2019s.github.io/FinaEcon2019S/%E9%87%91%E8%9E%8D%E7%BB%8F%E6%B5%8E%E5%AD%A6%E4%BA%8C%E5%8D%81%E4%BA%94%E8%AE%B2-%E5%BE%90%E9%AB%98-2017%E6%98%A5.pdf">金融经济学</a>运用经济分析的技术来理解个人的储蓄与投资决策，公司的投资、融资、分红决策，利率、金融资 产和衍生品价格的水平和性质，以及金融中介所发挥的经济作用。</p><span id="more"></span><h1>理论与艺术</h1><blockquote><p>如果把理性人世界比作狗主人，真实世界就是围绕狗主人跑来跑去的小狗。我们的目的是分析和预判小狗的行动。这既可以通过分析狗主人的行为来进行，也可以通过观察小狗的行为来达到。分析狗主人是金融理论的领域，是可以用科学的方法来推进的。而观察小狗则是处于金融理论之外的范畴，没有科学的方法可以应用，而只能艺术性地去把握。这就是金融艺术的领地。</p></blockquote><h1><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-11T14:25:34.028161677-vnjyzgoz.png" alt="2024-02-11T14:25:34.028161677-vnjyzgoz.png">整体内容</h1><ul><li><p>资产定价问题：给定资产未来的支付，判断资产现在应该值多少钱</p><ul><li>好资产的期望回报率应该高还是低？</li></ul></li></ul><h1><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-11T11:53:32.816844867-fdkqozhu.png" alt="">基础知识</h1><ul><li><p>金融市场：通过交易金融资产来实现资金融通的市场机制。</p></li><li><p>货币的创造：央行发行基础货币，商业银行利用基础货币在存款准备金率的限制下创造广义货币。</p></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-17T22:41:47.308309639-xacphpao.png" alt="2024-02-17T22:41:47.308309639-xacphpao.png"></p><ul><li><p>利率：72法则，每年复利6%，只需要12 年就能把本金翻番</p><ul><li><p>不同时间的资金价值是不一样</p></li><li><p>现金流</p></li><li><p>NPV</p></li><li><p>IRR: <code>iPhone X 6299, 6个月每期1081.14，宣传年费率6%起, 但IRR为10%</code></p></li></ul></li><li><p>债券</p><ul><li><p>到期收益率：出一个较好衡量债券价格的指标</p></li><li><p>即期收益率：找出给新债券定价的方法</p></li><li><p>远期利率：从债券价格信息中萃取市场对未来利率走势的预期</p></li><li><p>久期：利率涨，短久期；利率降，长久期</p></li></ul></li><li><p>股票</p><ul><li><p>股利贴现模型(DDM)</p></li><li><p>股票市盈率</p></li><li><p>市场机制就保证了企业管理层必须以最大化股价为目标</p></li><li><p>中国特色：A股市场高度集中，可能长期偏离市场的偏好</p></li></ul></li></ul><h1>均衡定价</h1><ul><li><p>CAPM：所有投资者都采用均值方差分析来确定其最优组合，那么在理想的状况下，均衡时的不同资产的预期回报率之间会具有一种线性关系，即证券市场线(SML)</p><ul><li><p>药品公司 vs 钢铁公司: 钢铁公司的系统风险高于药品公司</p></li><li><p>回报率低于无风险利率的风险资产：保险</p></li><li><p>两种期望回报率一样的资产，波动率小好于选波动率大：资产组合</p></li><li><p>基金经理：Jensen’s Alpha</p></li></ul></li><li><p>C-CAPM: 基于消费的资本资产定价模型</p><ul><li><p>期望效用</p><ul><li>圣彼得堡悖论</li></ul></li><li><p>分析资产定价的正确逻辑</p><ul><li><p>投资者交易资产的最终目的是获得尽可能高的效用</p></li><li><p>资产交易不是零和博弈，而是资源在不同消费者之间进行优化配置的过程</p></li></ul></li><li><p>理论能够解释现实是一个了不起的成就，同时也暴露了理论的不足</p><ul><li><p>无风险利率之谜</p></li><li><p>风险溢价之谜</p></li></ul></li></ul></li></ul><h1>套利定价</h1><ul><li><p>期权衍生品定价：单期二叉树模型</p><ul><li><p>风险消除法</p></li><li><p>复制法定价</p></li><li><p>风险中性定价</p></li></ul></li><li><p>资产定价基本定理(居然用到了数学中的超平面分离定理)：在完备市场中只要不存在套利机会，就一定会存在一个正的状态价格向量来给所有资产定价</p><ul><li><p>风险中性概率</p></li><li><p>转换魔盒定价</p></li></ul></li><li><p>多期二叉树模型</p><ul><li><p>叠期望定律</p></li><li><p>鞅性：在风险中性概率下，对任何资产未来贴现价格的预期，都等于这一资产当前的贴现价格</p></li><li><p>连续时间模型(随机微积分)：Black-Scholes 公式</p></li></ul></li><li><p>最优停时：到期日不确定的资产定价</p><ul><li>按揭贷款定价：可以提前还款</li></ul></li><li><p>动态对冲</p><ul><li><p>Delta、Gamma、Vega 与其他希腊字母</p></li><li><p>组合保险：越低越卖，放大市场波动</p></li></ul></li></ul><h1>金融摩擦</h1><p>信息不对称</p><ul><li><p>事后：道德风险</p><ul><li><p>委托代理模型(契约理论) ：出借人(项目的成功)和借款人(项目成功+偷懒)之间的利益导向不完全一致</p></li><li><p>信贷配给：借款者即使愿意支付资金出借人所要求的利率水平（甚至更高），仍无法获得贷款的现象</p></li><li><p><strong>爱护自己的声誉</strong></p></li></ul></li><li><p>事前：逆向选择</p><ul><li><p>完美的市场：公司价值与资本结构无关(MM定理)</p></li><li><p>不对称(投资者不知道企业类型): 市场崩溃 vs 交叉补贴</p></li><li><p>啄序假说：为自己的投资项目融资时，公司会优先选择内部融资（留存利润），然后是债券融资，然后才是股票融资(信息强度从低到高)</p></li><li><p>信息改变：分离均衡中坏企业股票增发的消息令股价走低</p></li></ul></li></ul><p>金融中介</p><ul><li><p>银行的本质(DD模型)：通过金融机构的期限错配来发挥期限转换的作用，为金融市场提供流动性</p></li><li><p>银行必须要受到管制：银行挤兑与存款保险</p></li><li><p>并非只有银行在做银行的本质业务：货币基金(余额宝)&amp;影子银行</p></li><li><p><strong>互联网金融不会消灭银行</strong></p></li></ul><h1>行为金融</h1><ul><li><p>有效市场：能在大街上捡到钱吗？</p></li><li><p>非理性：噪声交易者</p><ul><li><p>过度自信：超过90%的人认为自己属于前50%</p></li><li><p>乐观与一厢情愿</p></li><li><p>信念保持</p></li></ul></li><li><p>有限套利</p><ul><li>投资绩效约束(市场在证明你正确之前，可能已经先把你消灭了)：A 股市中的公募基金操作散户化</li></ul></li><li><p>障碍</p><ul><li><p>对理性行为的最优对策是理性的行为</p></li><li><p>对非理性的行为偏差的最优对策不是非理性</p></li></ul></li></ul><h1>风险管理</h1><ul><li><p>微观层面</p><ul><li><p>市场风险：希腊字母(组合价值)到风险度量值VaR(机构整体)</p></li><li><p>信用风险：信用评级</p></li><li><p>操作风险</p></li></ul></li><li><p>宏观层面</p><ul><li>次贷危机</li></ul></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-17T21:50:45.460241266-cbmqqwxf.png" alt="2024-02-17T21:50:45.460241266-cbmqqwxf.png"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消灭暴力扫描，世界属于渐进</title>
    <link href="/2023/12/09/%E6%B6%88%E7%81%AD%E6%9A%B4%E5%8A%9B%E6%89%AB%E6%8F%8F%EF%BC%8C%E4%B8%96%E7%95%8C%E5%B1%9E%E4%BA%8E%E6%B8%90%E8%BF%9B/"/>
    <url>/2023/12/09/%E6%B6%88%E7%81%AD%E6%9A%B4%E5%8A%9B%E6%89%AB%E6%8F%8F%EF%BC%8C%E4%B8%96%E7%95%8C%E5%B1%9E%E4%BA%8E%E6%B8%90%E8%BF%9B/</url>
    
    <content type="html"><![CDATA[<p>数仓建设过程中大部分表都是增量表，当计算过去一段时间的聚合指标时，常规的实现方式会重复扫描分区，带来大量计算的浪费。本文我们将介绍一些增量计算的方式，避免重复扫描分区，提高计算效率～</p><span id="more"></span><h1>现象</h1><p>当我们要计算过去一段时间的指标(如过去30天的成交量)时，最直接的实现方式就是暴力扫描多个分区的天表数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  pk<br>      <span class="hljs-comment">-- 滑动窗口：开始和结束时间每天变化</span><br>        ,<span class="hljs-built_in">SUM</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_sum_nd<br>        ,<span class="hljs-built_in">MAX</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_max_nd<br>        <span class="hljs-comment">-- 累计窗口：开始时间固定，结束时间变化</span><br>        ,<span class="hljs-built_in">SUM</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;startdate&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_sum_td<br>        ,<span class="hljs-built_in">MAX</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;startdate&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_max_td<br><span class="hljs-keyword">FROM</span>    a_1d<br><span class="hljs-comment">-- 假定startdate &gt; bizdate-nd</span><br><span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span><br><span class="hljs-keyword">AND</span>     dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> pk;<br></code></pre></td></tr></table></figure><p>这样就会浪费大量资源：</p><ul><li>反复扫描重复分区，产出耗时长。</li><li>当在同一个作业耦合不同周期指标时，若下游需产出时效保证，会重复计算短周期指标。</li></ul><p>本文就结合阿里云<a href="https://www.aliyun.com/product/odps">MaxCompute</a>计算服务，来讨论几种解决方案~</p><h1>技术优化</h1><h2 id="递推计算">递推计算</h2><ul><li>适用于指标计算存在递推公式：避免暴力扫描，效率大大提升<ul><li>累计窗口：SUM、MAX等都可递推计算</li></ul></li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\sum^n_{i=0} a_i = \sum^{n-1}_{i=0} a_i + a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><munderover><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\max^n_{i=0} a_i = \max(\max^{n-1}_{i=0} a_i, a_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7596em;vertical-align:-0.7277em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.032em;"><span style="top:-2.3723em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span><span style="top:-3.6306em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7277em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9093em;vertical-align:-0.7277em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1817em;"><span style="top:-2.3723em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span><span style="top:-3.6306em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7277em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>滑动窗口：SUM可递推计算，但<strong>MAX不可以</strong>, 因为最大值可以处于临界窗口边界</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo>−</mo><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\sum^n_{i=1} a_i = \sum^{n-1}_{i=0} a_i + a_n - a_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li>缺点<ul><li>这世界没有银弹，当改用增量计算后，依赖需设置为<strong>自依赖</strong>，补数据时需<strong>串行</strong>执行，若需求紧急，需再暴力扫描<strong>初始化</strong>，开发成本高。</li></ul></li></ul><h3 id="JOIN实现">JOIN实现</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-built_in">COALESCE</span>(today.pk, yst.pk)                                                   <span class="hljs-keyword">AS</span> pk<br>        ,<span class="hljs-built_in">SUM</span>(<span class="hljs-built_in">COALESCE</span>(m_sum_nd, <span class="hljs-number">0</span>) <span class="hljs-operator">+</span> <span class="hljs-built_in">COALESCE</span>(today.m_1d, <span class="hljs-number">0</span>) <span class="hljs-operator">-</span> <span class="hljs-built_in">COALESCE</span>(nd.m_1d, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_sum_nd<br>        ,<span class="hljs-built_in">SUM</span>(<span class="hljs-built_in">COALESCE</span>(m_sum_td, <span class="hljs-number">0</span>) <span class="hljs-operator">+</span> <span class="hljs-built_in">COALESCE</span>(today.m_1d, <span class="hljs-number">0</span>))                        <span class="hljs-keyword">AS</span> m_sum_td<br>        ,GREATEST(m_max_td, today.m_1d)                                              <span class="hljs-keyword">AS</span> m_max_td<br><span class="hljs-keyword">FROM</span>    (<br>            <span class="hljs-keyword">SELECT</span>  pk<br>                    ,m_1d<br>            <span class="hljs-keyword">FROM</span>    a_1d<br>            <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span><br>        ) today<br><span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> (<br>                    <span class="hljs-keyword">SELECT</span>  pk<br>                            ,m_sum_nd<br>                            ,m_sum_td<br>                            ,m_max_td<br>                    <span class="hljs-keyword">FROM</span>    a_nd<br>                    <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate-1d&#125;&#x27;</span><br>                ) yst<br><span class="hljs-keyword">ON</span>      today.pk <span class="hljs-operator">=</span> yst.pk<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>   (<br>                <span class="hljs-keyword">SELECT</span>  pk<br>                        ,m_1d<br>                <span class="hljs-keyword">FROM</span>    a_1d<br>                <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span><br>            ) nd<br><span class="hljs-keyword">ON</span>      <span class="hljs-built_in">COALESCE</span>(today.pk, yst.pk) <span class="hljs-operator">=</span> nd.pk;<br></code></pre></td></tr></table></figure><ul><li>缺点：join算子消耗大，且不同周期join会串行执行，当维度和周期过多时，效率提升不明显。</li></ul><h3 id="UNION实现">UNION实现</h3><ul><li>优化：可并行，效率更高。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  pk<br>        ,<span class="hljs-built_in">SUM</span>(m_sum_nd <span class="hljs-operator">+</span> m_1d <span class="hljs-operator">-</span> m_np1d) <span class="hljs-keyword">AS</span> m_sum_nd<br><span class="hljs-keyword">FROM</span>    (<br>            <span class="hljs-keyword">SELECT</span>  pk<br>                    ,m_sum_nd<br>                    ,<span class="hljs-number">0</span> <span class="hljs-keyword">AS</span> m_1d<br>                    ,<span class="hljs-number">0</span> <span class="hljs-keyword">AS</span> m_np1d<br>            <span class="hljs-keyword">FROM</span>    a_nd<br>            <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate-1d&#125;&#x27;</span><br>            <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>            <span class="hljs-keyword">SELECT</span>  pk<br>                    ,<span class="hljs-number">0</span> <span class="hljs-keyword">AS</span> m_sum_nd<br>                    ,m_1d<br>                    ,<span class="hljs-number">0</span> <span class="hljs-keyword">AS</span> m_np1d<br>            <span class="hljs-keyword">FROM</span>    a_1d<br>            <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span><br>            <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>            <span class="hljs-keyword">SELECT</span>  pk<br>                    ,<span class="hljs-number">0</span>    <span class="hljs-keyword">AS</span> m_sum_nd<br>                    ,<span class="hljs-number">0</span>    <span class="hljs-keyword">AS</span> m_1d<br>                    ,m_1d <span class="hljs-keyword">AS</span> m_np1d<br>            <span class="hljs-keyword">FROM</span>    a_1d<br>            <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span><br>) a<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> pk;<br></code></pre></td></tr></table></figure><ul><li>缺点：字段对齐比较麻烦，可能需要一个copliot：</li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>prompt      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs text">You are a SQL expert that knows use progressive method to calculate past periods metircs.<br>For example, when you need calculate past 30 days metric each day, you can use recurrence formula: <br>use yesterday 30 days metric plus today 1 day metric substract 30 days ago 1 day metric<br><br>Pay attention to use variable like $&#123;bizdate-30&#125;, not use date functions. <br><br>Use the following format:<br><br>Question: &quot;Question here&quot;<br>Answer: &quot;SQL Query to run&quot;<br><br>Here an example:<br>Question: &quot;Suppose we have two tables:<br><br>CREATE TABLE a_1d (<br>    pk STRING<br>    ,m_1d BIGINT<br>    ,n_1d BIGINT<br>    ,dt STRING<br>); <br><br>CREATE TABLE a_nd (<br>    pk STRING<br>    ,m_7d BIGINT<br>    ,n_7d BIGINT<br>    ,m_30d BIGINT<br>    ,n_30d BIGINT<br>    ,dt STRING<br>); <br><br>How to calculate passed 7, 30 days metrics using SUM aggregation progressively by a_1d and a_nd?<br><br>Answer:<br><br>SELECT  pk<br>        ,SUM(m_7d + m_1d - m_8d) AS m_7d<br>        ,SUM(n_7d + n_1d - n_8d) AS n_7d<br>        ,SUM(m_30d + m_1d - m_31d) AS m_30d<br>        ,SUM(n_30d + n_1d - n_31d) AS n_30d<br>FROM    (<br>            SELECT  pk<br>                    ,m_nd<br>                    ,n_nd<br>                    ,0 AS m_1d<br>                    ,0 AS n_1d<br>                    ,0 AS m_8d<br>                    ,0 AS n_8d<br>                    ,0 AS m_31d<br>                    ,0 AS n_31d<br>            FROM    a_nd<br>            WHERE   dt = &#x27;$&#123;bizdate-1&#125;&#x27;<br>            UNION ALL<br>            SELECT  pk<br>                    ,0 AS m_nd<br>                    ,0 AS n_nd<br>                    ,m_1d<br>                    ,n_1d<br>                    ,0 AS m_8d<br>                    ,0 AS n_8d<br>                    ,0 AS m_31d<br>                    ,0 AS n_31d<br>            FROM    a_1d<br>            WHERE   dt = &#x27;$&#123;bizdate&#125;&#x27;<br>            UNION ALL<br>            SELECT  pk<br>                    ,0 AS m_nd<br>                    ,0 AS n_nd<br>                    ,0 AS m_1d<br>                    ,0 AS n_1d<br>                    ,m_1d AS m_8d<br>                    ,n_1d AS n_8d<br>                    ,0 AS m_31d<br>                    ,0 AS n_31d<br>            FROM    a_1d<br>            WHERE   dt = &#x27;$&#123;bizdate-7&#125;&#x27;<br>            UNION ALL<br>            SELECT  pk<br>                    ,0 AS m_nd<br>                    ,0 AS n_nd<br>                    ,0 AS m_1d<br>                    ,0 AS n_1d<br>                    ,0 AS m_8d<br>                    ,0 AS n_8d<br>                    ,m_1d AS m_31d<br>                    ,n_1d AS n_31d<br>            FROM    a_1d<br>            WHERE   dt = &#x27;$&#123;bizdate-30&#125;&#x27;<br>        ) a<br>GROUP BY pk;&quot;<br><br>Question: &quot;Suppose we have two tables:<br>&#123;1d table DDL&#125;<br>and <br>&#123;nd table DDL&#125;<br><br>How to calculate passed &#123;periods&#125; days metrics using SUM aggregation progressively by &#123;1d table name&#125; and &#123;nd table name&#125; ? &quot;<br><br>Answer: &quot;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="不可递推指标">不可递推指标</h2><p>处理nd滑动窗口中计算MAX等不可递推指标时，可以用MAP、ARRAY等复杂类型数据结构存放过去时间周期的指标，然后直接对复杂类型中的指标进行聚合计算：</p><ol><li>每天增量维护复杂数据结构：移除(n+1)d指标并添加1d的指标。</li><li>利用<a href="https://help.aliyun.com/zh/maxcompute/user-guide/complex-type-functions?spm=a2c4g.11186623.0.0.7e2f5f90nwyQlb">复杂类型函数</a>聚合计算：过滤出相应时间范围的指标聚合。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  pk<br>        ,ARRAY_MAX(MAP_VALUES(MAP_FILTER(m_map, (k, v) <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> k <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span>))) <span class="hljs-keyword">AS</span> m_max_nd<br><span class="hljs-keyword">FROM</span>    (<br>            <span class="hljs-keyword">SELECT</span>  <span class="hljs-built_in">COALESCE</span>(today.pk, yst.pk)                                                             <span class="hljs-keyword">AS</span> pk<br>                    <span class="hljs-comment">-- 维护过去nd的map</span><br>                    ,MAP_CONCAT(MAP_FILTER(m_map, (k, v) <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> k <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span>), MAP(<span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m_1d)) <span class="hljs-keyword">AS</span> m_map<br>            <span class="hljs-keyword">FROM</span>    (<br>                        <span class="hljs-keyword">SELECT</span>  pk<br>                                ,m_max_nd<br>                                ,m_map<br>                        <span class="hljs-keyword">FROM</span>    a_nd<br>                        <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate-1d&#125;&#x27;</span><br>            ) yst<br>            <span class="hljs-keyword">FULL</span> <span class="hljs-keyword">JOIN</span>   (<br>                            <span class="hljs-keyword">SELECT</span>  pk<br>                                    ,m_1d<br>                            <span class="hljs-keyword">FROM</span>    a_1d<br>                            <span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span><br>            ) today<br>            <span class="hljs-keyword">ON</span>      yst.pk <span class="hljs-operator">=</span> today.pk<br>) mid;<br></code></pre></td></tr></table></figure><ul><li>缺点：复杂类型使用技巧较高，当指标类型很多时，需存放过多指标，可能也会有性能问题。</li></ul><h2 id="渐进计算">渐进计算</h2><p>修改代码的ROI还是太低，有没有更简单的方法？<a href="https://help.aliyun.com/zh/maxcompute/user-guide/reference-progressive-calculation?spm=a2c4g.11186623.0.0.3eb27a331KXf03">渐进计算</a>带来了一些曙光，只需在暴力扫描的代码上添加一行参数即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启渐进计算</span><br><span class="hljs-keyword">SET</span> odps.progressive.enable<span class="hljs-operator">=</span><span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">SELECT</span>  pk<br>      <span class="hljs-comment">-- 滑动窗口：开始和结束时间每天变化</span><br>        ,<span class="hljs-built_in">SUM</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_sum_nd<br>        ,<span class="hljs-built_in">MAX</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_max_nd<br>        <span class="hljs-comment">-- 累计窗口：开始时间固定，结束时间变化</span><br>        ,<span class="hljs-built_in">SUM</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;startdate&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_sum_td<br>        ,<span class="hljs-built_in">MAX</span>(IF(dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;startdate&#125;&#x27;</span> <span class="hljs-keyword">AND</span> dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span>, m, <span class="hljs-number">0</span>)) <span class="hljs-keyword">AS</span> m_max_td<br><span class="hljs-keyword">FROM</span>    a_1d<br><span class="hljs-comment">-- 假定startdate &gt; bizdate-nd</span><br><span class="hljs-keyword">WHERE</span>   dt <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;$&#123;bizdate-nd&#125;&#x27;</span><br><span class="hljs-keyword">AND</span>     dt <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;$&#123;bizdate&#125;&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> pk;<br></code></pre></td></tr></table></figure><ul><li>原理简析<ul><li>第一次运行时产生可复用的中间表，比如天表，月表等。</li><li>再结合当天增量数据和中间表，生成最终结果。</li></ul></li><li>特点<ul><li>第一次由于需要生成中间表，消耗时间长，所以需要在周期前需提前运行一次。</li><li>中间表的合并、拆分、生命周期由平台关联，用户不用关心。</li></ul></li><li>缺点<ul><li>由于是通用的计算优化，效果可能没有之前的增量效率高。</li><li>高级特性使用较少，遇到问题时可能较难解决。</li></ul></li></ul><h1>规范建模</h1><p><strong>TODO</strong>: 利用<a href="https://help.aliyun.com/zh/dataphin/user-guide/specification-modeling-overview?spm=a2c4g.11186623.0.0.4c2f3d93huTeEm">规范化研发</a>自动生成指标，<strong>定义即研发</strong>， 计算优化统一由平台进行，不用用户关心。</p><h1>总结</h1><p>本文讨论了几种优化暴力扫描的技巧，但我希望这些技巧以后都不用用户操心，可以自动集成在开发平台中，开发人员只需关心业务逻辑即可~</p>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>数仓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零搭建网站</title>
    <link href="/2023/11/05/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2023/11/05/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何利用云产品搭建一个属于自己的网站~</p><span id="more"></span><h1><strong>背景知识</strong></h1><ol><li><p>网络基础知识介绍：<a href="https://fex-team.github.io/blog/2014/05/what-happen//">从输入 URL 到页面加载完成的过程中都发生了什么事情</a>。</p></li><li><p>免费简单配置搭建网站：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站</a>。</p></li></ol><p>本文将介绍利用<a href="https://www.huaweicloud.com/">华为云产品</a>从零搭建一个网站。</p><h1><strong>快速部署</strong></h1><h2 id="购买服务器"><strong>购买服务器</strong></h2><p>现在<a href="https://www.huaweicloud.com/product/hecs-light.html">云服务器厂商</a>大多产品都可以免费试用，对新手上手很友好，同时也会有像双11等大促活动，例如笔者就在双11中用170块就入手了一台2核/4G/5Mbps的云服务器，还是比较划算的~</p><h2 id="部署应用"><strong>部署应用</strong></h2><p>有了服务器后，可以参考之前的文章先<a href="https://syntomic.github.io/2023/03/05/%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">搭建开发环境</a>，之后我们就可以部署应用。这里以用Docker部署开源建站工具<a href="https://docs.halo.run/">Halo</a>为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -it -d --name halo -p 8090:8090 -v ~/.halo2:/root/.halo2 halohub/halo:2.13<br></code></pre></td></tr></table></figure><p>之后只需在VPC的安全组放行相应端口(8090), 即可在公网通过http协议 + 服务器ip + 端口访问应用: <code>http://&#123;your_ip&#125;:8090</code></p><p>但为了统一管理服务器上的访问，我们采用Nginx来配置反向代理，这样就可以直接使用服务器ip访问：<code>http://&#123;your_ip&#125;</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.yourdomain.com;<br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">1024m</span>;<br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8090;<br>    <span class="hljs-attribute">proxy_set_header</span> HOST <span class="hljs-variable">$host</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1><strong>便捷访问</strong></h1><p>IP地址不利于记忆，所以我们需要<a href="https://www.huaweicloud.com/product/domain.html">注册一个易记的域名</a>访问，再配置个<a href="https://vscode-remote+ssh-002dremote-002b192-002e168-002e31-002e37.vscode-resource.vscode-cdn.net/Users/syntomic/open-source/blog/source/_posts/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99.md">A类型</a>的DNS解析绑定主机IP，理论上就可以用域名访问：<code>http://&#123;your_domain&#125;</code>。</p><p>但这个时候如果直接尝试利用域名访问的话会出现以下提示：</p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/404.png" alt="404.png"></p><p>这是因为使用大陆节点服务器提供互联网信息服务，需要在服务器提供商处提交<a href="https://vscode-remote+ssh-002dremote-002b192-002e168-002e31-002e37.vscode-resource.vscode-cdn.net/Users/syntomic/open-source/blog/source/_posts/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99.md">ICP备案</a>申请。</p><blockquote><p>但像笔者现在这样漂泊四方的状态，由于居住地和户口所在地不同，备案还通过不了，只能暂时采用<a href="https://zhuanlan.zhihu.com/p/529826545">CNAME的方式</a>使用域名了。</p></blockquote><h1><strong>安全访问</strong></h1><p>由于http协议采用明文传输数据，很不安全，故现在大都都采用https(http+ssl/tls)加密传输：<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/ssl.png" alt="ssl.png"><br>我们可以先在<a href="https://www.huaweicloud.com/product/scm.html">SSL证书管理服务</a>上购买DigiCert颁发的免费DV(Basic)证书，然后通过一系列流程后就能开启https访问：<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/ssl_pipeline.png" alt="ssl_pipeline.png"><br>最后的Nginx配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>              <span class="hljs-number">443</span> ssl;  <br>    <span class="hljs-attribute">ssl_certificate</span>     cert/server.crt;  <br>    <span class="hljs-attribute">ssl_certificate_key</span> cert/server.key;<br>    <span class="hljs-attribute">ssl_session_cache</span>   shared:SSL:<span class="hljs-number">1m</span>;  <br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;  <br>    <span class="hljs-attribute">ssl_ciphers</span>         HIGH:!aNULL:!MD5;         <br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span>  <span class="hljs-literal">on</span>; <br>    <span class="hljs-attribute">server_name</span> syntomic.cn;<br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">1024m</span>;<br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8090;<br>    <span class="hljs-attribute">proxy_set_header</span> HOST <span class="hljs-variable">$host</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就完成了一个基本的网站搭建，使用自己的服务器，并可以使用https协议和域名访问：<code>https://&#123;your_domain&#125;</code></p><h1>问题</h1><h2 id="主机安全">主机安全</h2><p>由于是自己购买服务器，需要格外注意主机安全，笔者就不小心由于若口令被被入侵：</p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-03-07T22:38:56.091462704-gudcsbpi.png" alt="">可以参考<a href="https://support.huaweicloud.com/bestpractice-securityInfo/securityInfo_01_0027.html">Linux主机安全加固建议</a>进行相应设置，并在设置利用密钥登陆后，关闭密码登陆<code>sudo vim /etc/ssh/sshd_config</code> :</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Change to no to disable tunnelled clear text passwords</span><br>PasswordAuthentication no<br></code></pre></td></tr></table></figure><h1><strong>总结</strong></h1><p>单体架构足以搭建出简单的应用系统，但随着系统功能越来越复杂，缺乏应用间自治和隔离的能力，又逐渐发展出了复杂的微服务架构。然而伴随着云原生化和无服务化的成熟，我们只需要简单地使用各种组件，像搭积木一样，就能构建出可靠、可扩展以及可维护的系统。</p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的职业生涯</title>
    <link href="/2023/11/01/%E6%88%91%E7%9A%84%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    <url>/2023/11/01/%E6%88%91%E7%9A%84%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/</url>
    
    <content type="html"><![CDATA[<ul><li></li></ul><p>作为一个一直学纯数学的同学，在被迫转硕后不得不思考今后的人生：换个学校继续读博，但不想再浪费时间；直接去当个高中老师，但尚未实现自身的价值；因为一直对计算机比较感兴趣，最终决定换个方向从头开始，希望在接受社会的毒打后能够证明自己的价值。本篇文章将记录职业生涯一路走来的点点滴滴~</p><span id="more"></span><h1>自学：2019-01~2019-07</h1><p>在得知转硕的结果到最终毕业其实只有一年的时间，只在大一学过的一点C语言等计算机基础知识早已遗忘，但从高中开始一直自学的我相信：</p><blockquote><p>只要明确整个知识框架，具体细节对一个学数学的人来说不是问题~</p></blockquote><p>于是通过网络找寻各种资料，开启了半年宅寝室的学习之旅：</p><ol><li>从基础开始<ul><li>编程语言<ul><li>人生苦短，我用<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python</a></li></ul></li><li>数据结构与算法<ul><li><a href="">数据结构与算法-Python语言描述</a>: 基于Python语言讲解</li><li><a href="https://book.douban.com/subject/27176836/">Algorithms-illuminated</a>: 斯坦福经典课程</li></ul></li><li>操作系统<ul><li><a href="https://book.douban.com/subject/4889838/">鸟哥的Linux私房菜</a>：通俗易懂</li></ul></li><li>计算机网络<ul><li><a href="https://book.douban.com/subject/26960678/">计算机网络(第7版) 谢希仁</a>：全面系统</li></ul></li></ul></li><li>应用<ul><li>前端<ul><li><a href="https://www.runoob.com/html/html5-intro.html">HTML/CSS/JavaScript</a>：内容/样式/交互</li></ul></li><li>后端<ul><li><a href="https://book.douban.com/subject/30310340/">Flask Web开发实战</a>：从学习到实战</li></ul></li><li>数据库<ul><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384">MySQL</a>：SQL Is All Your Need</li></ul></li></ul></li><li>数据<ul><li>数据采集<ul><li><a href="https://book.douban.com/subject/30175598/">Python3网络爬虫开发实战</a>：知识的综合运用</li></ul></li><li>数据分析<ul><li><a href="https://book.douban.com/subject/25779298/">Python for Data Analysis</a>：利用Python处理数据</li></ul></li><li>大数据<ul><li><a href="https://book.douban.com/subject/27606713/">大数据技术原理与应用</a>：大数据技术简要介绍</li></ul></li></ul></li><li>AI<ul><li>机器学习<ul><li><a href="https://book.douban.com/subject/27154347/">Hands-On Machine Learning with Scikit-Learn &amp;TensorFlow</a>：一个完整的机器学习项目</li></ul></li><li>深度学习<ul><li><a href="https://book.douban.com/subject/35044046/">神经网络与深度学习</a>：理论要扎实</li><li><a href="https://book.douban.com/subject/30293801/">Python深度学习</a>：上手实践</li><li><a href="http://fancyerii.github.io/2019/03/14/dl-book/">深度学习理论与实战：提高篇</a>：跟上AI的发展</li></ul></li><li>NLP<ul><li><a href="https://book.douban.com/subject/25746399/">统计自然语言处理</a>: 这本书我真的看过吗》</li><li>知识图谱：<strong>Things Not Strings</strong></li></ul></li></ul></li><li>工具:  工欲善其事，必先利其器<ul><li>vscode</li><li>git</li><li>docker</li></ul></li><li>面试<ul><li><a href="https://book.douban.com/subject/27008702/">剑指offer</a>：看明白了但不代表会做</li><li><a href="https://book.douban.com/subject/30285146/">百面机器学习</a>：看了但也没完全看</li><li><a href="https://book.douban.com/subject/30243136/">美团机器学习实践</a>：假装自己实践过了</li></ul></li></ol><p>半年的时间，有了一个大概的框架，一份毫无含金量的简历，以及多了一个胖成球的人。。<br /><br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/cv1.png" alt=""></p><h1>校招：2019-08~2019-10</h1><p>专业不对口，没有实习经历，也不喜欢背八股文以及刷算法题，在一次次地失败后一度陷入了自我怀疑中：</p><ul><li>提前批：不用笔试，凭着教育背景还可以直接参与面试<ul><li>iHandy(后端)：第一次面试，10分钟就把我请了出去</li><li>美团(算法)：面试官教我如何面试</li><li>阿里(算法)：总算撑过了完整的1小时面试，但技术细节没有说清楚</li></ul></li><li>正式批：前期笔试都通过不了，积累经验后才有了一些面试机会<ul><li>百度(算法)：被质疑文凭了</li><li>字节(后端)：两次机会都没有抓住</li><li>华为(算法)：面试官帮我进入下一轮面试</li></ul></li></ul><p>到了10月底，我还没拿到任何一家公司的offer，不过还好老天最后给我开了一扇窗。这个时候网易将我调剂到了测试开发的职位上，意外地很顺利就通过面试，然后很快就拿到了意向书。悬着的心终于可以放下了，感谢网易游戏给了我这样一个机会，来到了广州开启了我的职业生涯~<br /><br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/first_job.jpg" alt=""></p><h1>网易：2020-01~2023-05</h1><h2 id="试用期：2020-01-2020-05">试用期：2020-01~2020-05</h2><p>学数学给人的第一印象应该做算法，所以试用期交给我的任务就是实现动捕数据自动修复算法：<br /><br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/motion.png" alt=""><br><br />而当时正值疫情居家办公期间，组内之前也没有做过类似工作，接受到这个任务后，还是按照之前学生的思维：独自查阅相应资料熟悉背景，看论文比较不同方案，缺少了和需求方的交流。因为对深度学习的方法也没有什么经验，最终只是复现了一个矩阵补全的算法，编写了个插件把整个流程跑通了，通过了试用期。<br /></p><p>但其实这个插件也没有用起来，因为动捕软件更新后推出了自动修复数据的功能。后续也发现网易AI LAB也做了相应的<a href="https://zhuanlan.zhihu.com/p/400009398">工作</a>，看来还是得专业的人来做专业的事~</p><h2 id="探索期：2020-05-2020-12">探索期：2020-05~2020-12</h2><p>接着被安排做数据中台的项目，但之前部门并没有做过什么数据相关的工作，对数据中台没有清晰的概念，所以做了很多探索性的工作，在一些场景里摸着石头过河:</p><ul><li>奖励监控：对比了业界许多异常检测的方法后，对<a href="https://tech.meituan.com/2017/04/21/order-holtwinter.html">美团外卖订单量预测异常报警模型</a>照猫画虎，调包<a href="https://facebook.github.io/prophet/">Prophet</a>简单跑通了个流程。但老板们对进度不太满意，没有继续研究下去了，虽然后面才知道做算法，其实最关键的是做好特征工程，而当时的我却忽略了这一点。</li><li>支付转化：算是做大数据的开始吧，但其实最开始采用的是从ELK上拉数据到本地，然后用Python分析的方案。后面才接触到公司的大数据组件，成为了一个SQL Boy，做了点数仓建设的工作。但其实这件事最大的成功点是数据挖掘，找到了之前计费、用户体验等部门都没有注意到的价值。</li><li>性能报表：其实就是一个工具人，做了一段时间API开发，但也算是之前自己做后端工程师的想法得到了满足。<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/sjzt.png" alt=""></li></ul><h2 id="成长期：2021-01-2022-06">成长期：2021-01~2022-06</h2><p>之后天降猛男，来了个总监级别的大佬，新成立中台部门，招了一些专业的人来做专业的事，带来了新的协同与组织关系。而这时的我也不满足于做一个SQL Boy，开始学习Java，用Flink进行实时开发：</p><ul><li>奖励监控：利用Flink开发出了一个动态规则引擎，可以让业务人员自由地配置告警规则，实时生效。期间不断地查阅技术文档、开源代码、优化方案，算是第一次有了自己比较满意的技术实现。</li><li>安全中台:  不断引入新技术来解决业务问题：引入Flink SQL来解决数据倾斜的问题；引入PyFlink算法策略部署问题；引入Flink AI FLow来解决AI工程化的问题等。围绕着Flink生态做出了一些创新的工作。</li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/flink.png" alt=""><br><br /> 这一段时间感觉每天都在学习成长，业务在不断发展，工作做着很开心，职级也三连跳，这算是梦想的职场生活了吧~</p><h2 id="迷茫期：2022-07-2023-05">迷茫期：2022-07~2023-05</h2><p>但好景不长，随着互联网行业降本增效之风席卷而来，业务的发展方向和我的个人兴趣出现了分歧，对自己的职业规划产生了迷茫，团队里看不到想做的事情。经过长时间的思考后，还是决定再去外面看一看，我的网易生涯就暂时告一段落了：<br /><br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/cv2.png" alt=""></p><h1>社招：2023-02~2023-05</h1><p>这个时候我依然抱着学习的心态，我觉得我的职业生涯还没有定型，还是可以做任何事。但社招主要看是否合适 ，企业已经没有耐心再花时间培养了：</p><ul><li>网易雷火：内部机会，不太合适，需要后端经验。</li><li>字节：依然两次机会：第一次不太合适，离线数仓经验欠缺；第二次关注的Flink技术点不一致。</li><li>拼多多：实时场景可能还有些欠缺，算法题也没有回答上来。</li></ul><p>其实我觉得仅通过几次面试并不能了解一个人的特点，这就是我开始写文章记录自己所思所想的部分原因。 虽然发现像证券、基金这些公司对我这种教育背景不错，有大厂经历的人感觉还不错，但我还是想再学点技术。于是我完全没有给自己留后路地来到了杭州，希望可以继续在大数据领域中深入~<br /><br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/second_job.jpg" alt=""></p><h1>蚂蚁：2023-06~至今</h1><h2 id="离线数据：2023-06-2024-01">离线数据：2023-06~2024-01</h2><p>虽然转换了行业和技术，但来到了专门做数据的部门，确实数据做得比较成熟，有很多可以学习的地方：职业划分比较细，每个方向上都有比较深的沉淀；金融业务对数据要求高，非常注重数据质量和合规；数据体量大，业务场景也足够复杂等。但做了一段时间后，发现自己的工作集中在取数工具人和历史包袱治理上，技术上也重新回到了SQL boy，没有什么沉淀和价值感，找不到兴趣点。<br /><br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/sjzl.png" alt=""></p><p><br />不过好在这边转岗比较方便，我发现当我听到湖仓一体的时候，我本能的就比较感兴趣，于是我又回到了实时技术中，开启了新一段旅途。</p><h2 id="实时数据：2024-01-2024-05">实时数据：2024-01~2024-05</h2><p>由于实时涉及的组件众多以及其状态计算等独特性，和离线其实有较大差异，但其实也算是回归到老本行，在适应了下相应的技术栈后，也可以很快上手。同时也有机会利用数据湖技术来重塑实时研发范式，实现降本增效，看起来似乎是回归到理想的职业发展轨道上来了？<br /><br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-05-13T22:09:33-rvsazqza.png" alt=""></p><p><br />但对于数据研发职业发展而言，要么更深入底层，做数据平台或引擎的开发，要么更贴近上层，利用数据驱动业务发展。而我由于非科班出身，又做上层数据应用多年，所以更适合将我定义为一个问题解决者：综合利用数据等技术手段系统地解决业务问题。所以我再次找寻更好的发展机会，希望可以做出一些有价值感工作~</p><h1>未完待续</h1><p>机缘巧合下进入了大数据领域，并逐渐建立起了自己的知识体系，貌似已经习惯了打工人的生活。但其实我依然没有变，还是像之前学数学一样，针对一个问题，喜欢不断寻求更好地解法。然而在工作中，可能更需要立体的思考，形成一套解决方案。如何将爱好特长和工作结合起来，发挥出自己的全部潜能，这是一个需要我持续探索的问题。</p>]]></content>
    
    
    <categories>
      
      <category>人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>职业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大模型知识地图</title>
    <link href="/2023/10/21/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E5%9C%B0%E5%9B%BE/"/>
    <url>/2023/10/21/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E5%9C%B0%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>工作后有许多人都问过我学数学的为什么不去做算法？那就跟上现在大模型的潮流，先了解下相关知识，希望将来可以有机会结合Data和AI做一番事情~</p><span id="more"></span><h1>大模型应用</h1><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/llm_ind_chain.png" alt="llm_ind_chain.png"></p><h2 id="行业实践">行业实践</h2><ul><li><p>Mathematics&amp;AI</p><ul><li><p><a href="https://leanprover.github.io/introduction_to_lean/">Lean</a>：数学形式化</p></li><li><p><a href="https://mp.weixin.qq.com/s/k7esrn3knpGWMbcKAhba-Q">AlphaGeometry</a>：几何奥数</p></li></ul></li><li><p>Data&amp;AI</p><ul><li><p><a href="https://arxiv.org/pdf/2303.10158.pdf">DCAI(Data-centric Artificial Intelligence)</a>: <a href="https://www.databricks.com/blog/lakehouse-ai">Lakehouse AI</a><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-11T11:14:25.143173160-zqhxeapz.png" alt="2024-02-11T11:14:25.143173160-zqhxeapz.png"></p></li><li><p><a href="https://www.databricks.com/blog/introducing-lakehouseiq-ai-powered-engine-uniquely-understands-your-business"><strong>LakehouseIQ</strong></a></p></li></ul></li></ul><h2 id="框架开发">框架开发</h2><p><strong>易上手</strong></p><ul><li><p>RAG: Retrieval Augmented Generation<img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-17T21:32:50.122735702-lfmlbnbb.png" alt=""></p></li><li><p>Agent：ReAct vs Tree of Thought</p><ul><li>Multi Agent：<a href="https://github.com/geekan/MetaGPT">MetaGPT</a></li></ul></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-18T20:41:34.926175464-ygzubmoy.png" alt="2024-02-18T20:41:34.926175464-ygzubmoy.png"></p><h1>基础大模型</h1><h2 id="语言大模型">语言大模型</h2><ul><li><p>发展历史<img src="https://github.com/Mooler0410/LLMsPracticalGuide/blob/main/imgs/tree.jpg?raw=true" alt="tree.jpg"></p></li><li><p>数据</p><ul><li><p>规模：Scaling Law</p></li><li><p>质量：多样性、重复率、混合比例等</p></li></ul></li><li><p>预训练</p><ul><li><p>任务：Mask</p></li><li><p>效率：分布式训练&amp;算子融合&amp;数据IO</p></li><li><p>稳定：debug&amp;checkpoint</p></li></ul></li><li><p>SFT</p><ul><li>PEFT(Parameter-Efficient Fine-Tuning): lora</li></ul></li><li><p>RLHF</p><ul><li><p>Reward model</p></li><li><p>强化学习-PPO</p></li></ul></li><li><p>评估</p><ul><li><p>任务：理解&amp;推理&amp;生成</p></li><li><p>方法：大模型评测大模型</p></li></ul></li><li><p>推理</p><ul><li><p>无损优化：backend&amp;fused op</p></li><li><p>有损优化：量化&amp;剪枝&amp;蒸馏</p></li></ul></li></ul><h2 id="多模态大模型">多模态大模型</h2><ul><li><p>Vision Transformer(ViT): 打通CV与NLP的壁垒</p></li><li><p>Encoder模式</p><ul><li><p>CLIP: 图文对齐有效方式</p></li><li><p>BEIT: 文本、图像走向统一</p></li></ul></li><li><p>桥接大语言模型</p><ul><li>Blip2: Q-Former</li></ul></li><li><p>视频大模型：时序建模</p></li><li><p>生成算法</p><ul><li><p>图像</p><ul><li><p>GAN</p></li><li><p>VAE</p></li><li><p>Diffusion Model: 加噪声和去噪声过程<img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-17T21:13:08.948439019-poijshdp.png" alt="2024-02-17T21:13:08.948439019-poijshdp.png"></p></li></ul></li><li><p>视频</p><ul><li><p>3D建模</p></li><li><p><a href="https://openai.com/sora">Sora</a>: DiT = VAE 编码器 + ViT + DDPM + VAE 解码器<img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-17T21:20:42.598478305-rhpjvtmb.png" alt="2024-02-17T21:20:42.598478305-rhpjvtmb.png"></p></li></ul></li></ul></li></ul><h2 id="行业大模型">行业大模型</h2><ul><li><p>常识 --&gt; 专业(知识 + 逻辑 + 适当性)</p><ul><li><p>世界知识 --&gt; 领域知识</p></li><li><p>基础能力 --&gt; 领域能力</p></li></ul></li><li><p>代码大模型</p></li><li><p>金融大模型</p></li></ul><h1>基础设施</h1><p><strong>AI芯片</strong></p><ul><li><p>Colossal-AI</p></li><li><p>DeepSpeed</p></li><li><p>Ray</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>大模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的数据体系</title>
    <link href="/2023/10/21/%E6%88%91%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/"/>
    <url>/2023/10/21/%E6%88%91%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>结合自己的数据生涯，构建数据体系知识，希望可以让数据流动起来，创造出更多的价值。</p><span id="more"></span><h1>背景知识</h1><p>什么是大数据：</p><ul><li><p>数据量大(Volume)</p></li><li><p>数据类型繁多(Variety)</p></li><li><p>处理数据快(Velocity)</p></li><li><p>价值密度低(Value)</p></li></ul><p>如何处理并从中发掘价值：</p><ol><li><p>基础设施：存储&amp;计算&amp;调度&amp;运维</p></li><li><p>平台服务：降低开发门槛</p></li><li><p>应用开发：创造业务价值</p></li></ol><h1><strong>从一个需求开始</strong></h1><p>需求：交易转化漏斗</p><ul><li><p>需求分析</p><ul><li><p>定义漏斗阶段：点击商品 -&gt; 创建订单 -&gt; 订单支付 -&gt; 支付成功</p></li><li><p>设定北极星指标：转化率&amp;转化时间</p></li></ul></li><li><p>数据采集：数据源</p><ul><li><p>客户端：api 上传</p></li><li><p>服务端：日志采集</p></li><li><p>数据库：binlog</p></li><li><p>外部引入：爬虫</p></li></ul></li><li><p>数据开发</p><ul><li><p>技术：SQL Is All Your Need<img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-24T11:20:29.632928807-tdqmswwl.png" alt=""></p></li><li><p>数仓分层：更好地管理和组织数据</p><ul><li><p>ODS：异构数据源入仓</p></li><li><p>DWD：不同阶段串联明细</p></li><li><p>DWS：用户粒度聚合</p></li><li><p>ADM：转化漏斗&amp;时间等指标</p></li></ul></li><li><p>数据运维</p><ul><li><p>补数：全增量一体&amp;更新</p></li><li><p>质量：SLA</p></li><li><p>成本：计算&amp;存储</p></li><li><p>合规&amp;安全：隐私计算</p></li></ul></li></ul></li><li><p>数据服务：看数 -&gt; 决策-&gt; 洞察</p><ul><li><p>看板：转化漏斗图(OLAP + BI)</p></li><li><p>标签：支付画像(KV)</p></li><li><p>特征&amp;样本：Feature Store</p></li><li><p>监控：转化波动(Message)</p></li></ul></li><li><p>数据价值：策略 -&gt; 效果</p><ul><li>AB实验：控制变量提高转化率</li></ul></li></ul><h1>问题</h1><h2 id="需求管理">需求管理</h2><ul><li><p>一个需求 -&gt; 一类需求</p><ul><li><p>业务建模</p><ul><li><p>业务过程</p></li><li><p>业务对象</p></li></ul></li><li><p>维度建模</p><ul><li><p>维度表</p></li><li><p>事实表</p></li></ul></li><li><p>指标建模</p><ul><li><p>原子指标：aggregation</p></li><li><p>业务限定：filter</p></li><li><p>统计粒度：group by</p></li><li><p>统计周期：window</p></li></ul></li></ul></li><li><p>需求背后真正的问题以及更大的问题</p><ul><li><p>团队 -&gt; 部门 -&gt; 公司 -&gt; 国家</p></li><li><p>团队协作：思考问题不能有边界，但需要明确分工</p></li></ul></li></ul><h2 id="底层技术">底层技术</h2><p>数据密集型应用系统：数据库组件 -&gt; 数据流应用系统</p><ul><li><p>分布式系统： CAP理论</p><ul><li><p>数据复制</p></li><li><p>数据分区</p></li><li><p>分布式事务：宽松式约束，事后进行修复</p></li><li><p>一致性与共识</p></li></ul></li><li><p>数据模型 + 声明式查询语言(SQL)</p><ul><li><p>关系模型</p></li><li><p>文档模型</p></li><li><p>图数据模型</p></li></ul></li><li><p>存储</p><ul><li><p>索引：LSM-Tree vs B-Tree</p></li><li><p>OLTP vs OLAP</p></li><li><p>文件(对象) vs 消息</p></li></ul></li><li><p>计算</p><ul><li><p>MapReduce -&gt; 超越MapReduce</p></li><li><p>流计算 vs 批计算 -&gt; 批计算为流计算的特例</p></li><li><p>Hadoop vs MPP</p></li></ul></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/2024-02-22T22:46:44.891263871-dlbhdyfu.png" alt=""></p><h2 id="技术发展"><strong>技术发展</strong></h2><ul><li>技术成熟度</li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/Gartner-Hype-Cycle-Data-Management.png" alt="Gartner-Hype-Cycle-Data-Management.png"></p><ul><li>湖仓一体：准实时</li></ul><p><img src="https://static.wixstatic.com/media/64d99a_59efd2eb2d5849999120ae1c6af3cada~mv2.png/v1/fill/w_835,h_516,al_c,q_90,usm_0.66_1.00_0.01,enc_auto/64d99a_59efd2eb2d5849999120ae1c6af3cada~mv2.png" alt=""></p><ul><li><p>Data&amp;AI</p><ul><li><p>DataOps: 重塑开发工作流</p></li><li><p>DCAI: 数据驱动模型效果提升</p></li></ul></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/Machine-Learning-Infrastructure-2.0.png" alt="Machine-Learning-Infrastructure-2.0.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>架构</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的数学生涯</title>
    <link href="/2023/10/21/%E6%88%91%E7%9A%84%E6%95%B0%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    <url>/2023/10/21/%E6%88%91%E7%9A%84%E6%95%B0%E5%AD%A6%E7%94%9F%E6%B6%AF/</url>
    
    <content type="html"><![CDATA[<p>曾经问过自己为什么选择数学，当时给出的答案是因为除了数学其他什么也不会。记忆里对数学一直很感兴趣，一路学到了中国的最高殿堂，只可惜最后迷路了，没有坚持下去。但一路走来，有过欣喜，有过悲伤，值得记录一下沿途的风景~</p><span id="more"></span><h1>中学：自由生长</h1><p>幼时的记忆已经逐渐模糊，已经不记得何时开始喜欢数学的，只记得在高中之前我应该算一个听话的学生：认真上课，完成作业，考出成绩。可能只是因为数学不用死记硬背，不用说太多话，成绩也好一点，就对数学的印象不错，但其实完全没有其他的想法，只在一本《奥数教程》里感受到了一些巧妙的解法。</p><p>到高中后，最开始被分到了一个文科班，课上内容学起来轻松愉快，考试怎么考都是第一。但这个时候有机会去听了次奥数讲座，知道了差距，暗暗下决心要学得更快些！于是我就开始养成了自学的习惯，上课就不在那么认真了。在高二成功来到了理科实验班后，我开始变得更加放肆，上课完全不听讲了，作业也不怎么做。这个时候我的成绩还算可以，所以老师也没怎么管我，所以在提前把高中知识学习完后，就尝试挑战了下数学竞赛。<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/high_school.png" alt=""></p><p>由于学校并没有专门的数学竞赛培训，所以基本上也是靠自学：中等数学、奥数讲座、竞赛真题等。高中三年从市一等奖到省二等奖再到全国三等奖，看来自己还是缺乏一些天赋。总结下来看当时还是太急于求成了，只是看了很多题解，但没有独立思考，形成自己的解题思路，同时也缺乏交流讨论，只是沉浸在自己的世界里，这时的自己还是一只井底之蛙。</p><p>高二暑假的时候有机会参加了四川省数学夏令营，再一次打开了我的视野，开始接触高等数学的一些知识，自己也买了一些专业书：《初等数论》，《组合数学》和《微分几何》，仿佛打开了新世界的大门。还记得高三大家都在紧张的复习中时，我却在课上筛选500以内的素数，也许我就是不喜欢在旧知识里打转。最终虽然我的高考数学只有110分，但坚信成绩不能代表能力，我仍然热爱着数学，准备着下一个机会！</p><h1>本科：凤凰涅槃</h1><h2 id="转专业">转专业</h2><p>由于高考不太理想，没有如愿读数学专业，但从拿到录取通知书的那一刻，我就开始准备转专业：考入吴玉章学院，获得选择专业的机会。虽然顺利通过了考试，但由于自身内向的性格，在面试阶段失利，且由于考试时间的冲突，还错失了数学拔尖班的机会。但我依然没有放弃，准备着一年后学校统一转专业的机会。</p><p>大一在学好物理专业课的同时，我也在自学数学专业课，而正好第一年物理系的数学课占比较大，对于我来说刚好是降维打击，学了一年下来成绩还是年级第二。这让我有信心大一下就提前选修了复变和实变两门数学专业课，虽然实变函数确实需要学十遍，但这份经历也帮助我最终成功转专业到了数学系，只不过要接受降级的命运。</p><p>但我不甘于这样的安排，我要跳级回去！于是我一年学习了两年的专业课，但其实没有听起来地那么难：我还可以额外选修物理和其他感兴趣的课程，一学期凑满50个学分；转专业还有特殊选课的权力，我可以同一时间上两门课，然后两门课都不去。在经过忙碌的一年后，我终于回归到了正常的2012级数学系生活，虽然这时的成绩不是很理想。<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/change_major.png" alt=""></p><h2 id="成就感">成就感</h2><p>大三到了展示实力的时候了，一方面我开始跟认真地学习专业课程，取得了更好地成绩，同时也积极回顾前两年的基础知识，有了更深入的理解。另一方面，也积极参加了大学生数学竞赛和数学建模竞赛，拿到了一些小奖项。</p><p>但这时的我缺乏对前沿数学的追求，眼看着周围的同学讨论着我不了解的问题，眼看着网上的同学都开始刷EGA/SGA了，眼看着各种前沿分享讨论，这次我选择了在旧知识里继续打转，认为我还需要再夯实基础，暂时封闭了起来。</p><p>不过这样也有好处，在大三下保研的时候，由于一直在巩固知识，一次性拿到了北大、清华、中科院的报送资格，有点小成就感了～<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/baoyan.png" alt=""></p><h2 id="舒适期">舒适期</h2><p>最后一年就进入舒适圈了：先是去北京参加了半年的强化班，要求选两门课，而我却真的只选了黎曼曲面、群表示论这两门课，却没有借此机会去学习了解更多的知识；然后按照老师给出的问题，总结了下前人一页纸的工作——<a href="https://www.ams.org/journals/proc/1974-042-02/S0002-9939-1974-0325587-3/S0002-9939-1974-0325587-3.pdf">Profinite Groups are Galois Groups</a>，就这样顺利地毕业了。最终只留下了一句Flag：在追求数学的美的道路上一直前行…</p><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/forward.jpg" alt=""></p><h1>直博：旅途待续</h1><h2 id="迷茫">迷茫</h2><p>到了研究生，第一件重要的事就是导师选择。数学大致就分为三个方向：分析、代数、几何，我感觉自己几何直觉不太好，又不是很喜欢复杂的计算，但抽象推理还不错，就想学代数方向。然而其实自己对细分方向没有什么了解，就直接按照导师的名气，选择了看起来比较高大上的算术几何。</p><p>但基础数学和其他专业不太一样，前几年基本上还是在学习专业课，而在上课的时候会发现有许多的本科生，水平都比我高很多，而我自己却陷入了各种抽象怪圈中，只是简单地看懂证明，寻找答案，没有理清定义背后的思路，缺乏讨论交流，开阔眼界，迷失了方向。如果当时早些读到<a href="https://www.ams.org/notices/200601/fea-chow.pdf">You Could Have Invented Spectral Sequences</a>这篇文章会有些改善。</p><p>所有的这些最终就在博资考上体现了出来，一共有三次机会都没有通过：第一次裸考倒在了分析上；第二次听说方程简单，但也没有通过；第三次看似准备了，却再次在分析上失利，失去了读博的资格。个人对不感兴趣的事还是提不起干劲，准备得不太认真是失败的根因。自此我的生活就发生了变化，之前只是单纯地认为自己会一直读下去，但现在却不得不开始思考人生了。<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/fail.png" alt=""></p><h2 id="论文">论文</h2><p>其实在上了Motives，Hodge理论和Galois表示这门综述性质的课后，自己又被数学不同领域之间的关联所吸引，重新燃起了一些激情，开始主动去看了很多论文书籍：尝试从历史的眼光，了解定理证明的来龙去脉，形成自己的知识体系。最终独立给出了论文选题，完成了了一篇还不错的硕士论文~<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/best_thesis.png" alt=""></p><h2 id="助教">助教</h2><p>在北大的收获除了认识了很多优秀的同学和老师，开阔了视野外，还有就是站在讲台上讲课的经历。自己的水平有限，只能选择当个高数助教降维打击了，先后经历了医学院、生科、地空、光华，越来越得心应手，享受那种分享知识，启发他人的感觉。最后因为转硕，没有心情去继续上完下学期的高数课，还损失了几万块钱，想起来还是有点可惜的。<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/assistant.png" alt=""></p><h1>总结</h1><p>从乡小学到镇初中到县高中到省本科到帝都研究，感叹自己能独自克服种种困难走到这里，但也遗憾缺乏信息渠道，交流沟通，导致未完成旅途。但这就是人生，如今的我已远离数学多年，但依然还有一些问题我渴望去理解~</p>]]></content>
    
    
    <categories>
      
      <category>人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我所了解的Flink</title>
    <link href="/2023/10/21/%E6%88%91%E6%89%80%E4%BA%86%E8%A7%A3%E7%9A%84Flink/"/>
    <url>/2023/10/21/%E6%88%91%E6%89%80%E4%BA%86%E8%A7%A3%E7%9A%84Flink/</url>
    
    <content type="html"><![CDATA[<p>工作后做了一段时间的SQL BOY，但从20年底开始不满足于现状，正好业务也有越来越多的实时需求，所以开始学习实时计算。从Java写起到回归SQL再到结合Python的探索，算是对Flink有了一定程度上的了解，本文将回顾个人学习经历，供自省与借鉴~</p><span id="more"></span><h1>从一个监控开始</h1><p>当时业务面临的一个监控的场景：游戏中一个玩家每天获得的奖励是有限的，需要监控玩家获得物品情况，达到阈值时预警及时地进行处理。在2020年底的时候Flink已经在实时计算领域成为业界的事实标准，所以选择Flink进行实时处理也就成为了自然而然的事。由于当时我们的实时计算平台主要用Java代码编写应用，所以第一个Flink程序采用底层API实现的。</p><h2 id="底层API：ProcessFunction">底层API：ProcessFunction</h2><p>使用底层API编写Flink程序主要的难点是状态的处理。因为实时应用是长期运行的，如果不及时处理过期状态，最终会由于OOM导致程序崩溃。这里我们采用MapState 模拟窗口状态，并注册处理时间定时器按照清理过期状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProcessFunction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">KeyedProcessFunction</span>&lt;String, Tuple3&lt;String, Long, Integer&gt;, String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">CLEAR_INTERVAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">28</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000L</span>;<br><br>    <span class="hljs-comment">// 窗口聚合状态：&lt;窗口开始时间戳, 聚合值&gt;</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> MapState&lt;Long, Integer&gt; aggState;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(Configuration config)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        MapStateDescriptor&lt;Long, Integer&gt; expAggDescriptor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapStateDescriptor</span>&lt;&gt;(<span class="hljs-string">&quot;Aggregation&quot;</span>, Long.class,<br>                Integer.class);<br>        aggState = getRuntimeContext().getMapState(expAggDescriptor);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processElement</span><span class="hljs-params">(Tuple3&lt;String, Long, Integer&gt; value,</span><br><span class="hljs-params">            KeyedProcessFunction&lt;String, Tuple3&lt;String, Long, Integer&gt;, String&gt;.Context ctx, Collector&lt;String&gt; out)</span><br>            <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 状态聚合</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">agg</span> <span class="hljs-operator">=</span> value.f2;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">windowStart</span> <span class="hljs-operator">=</span> getWindowStartWithOffset(value.f1);<br>        <span class="hljs-keyword">if</span> (aggState.contains(windowStart)) &#123;<br>            agg += aggState.get(windowStart);<br>        &#125;<br>        aggState.put(value.f1, agg);<br><br>        <span class="hljs-comment">// 阈值判断</span><br>        <span class="hljs-keyword">if</span> (agg &gt; THRESHOLD) &#123;<br>            out.collect(<span class="hljs-string">&quot;Alert Happens!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 状态清理：第二天凌晨3点清理过期状态</span><br>        ctx.timerService().registerProcessingTimeTimer(windowStart + CLEAR_INTERVAL);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onTimer</span><span class="hljs-params">(<span class="hljs-type">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        aggState.remove(timestamp - CLEAR_INTERVAL);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getWindowStartWithOffset</span><span class="hljs-params">(<span class="hljs-type">long</span> timestamp)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">windowSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">remainder</span> <span class="hljs-operator">=</span> (timestamp - offset) % windowSize;<br>        <span class="hljs-comment">// handle both positive and negative cases</span><br>        <span class="hljs-keyword">if</span> (remainder &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> timestamp - (remainder + windowSize);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> timestamp - remainder;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实由于一开始不熟悉Java以及Flink相关API，导致了很多问题，比如没有正确清理状态，debug排查问题难、代码组织混乱等。这个故事告诉我们一开始不熟悉API时，应该从上层API开始应用，屏蔽底层架构的复杂性。<br /></p><p>当然，随着经验的增多，我也再不断优化代码结构，提升开发效率：</p><ul><li>执行环境和作业参数的模块化：默认参照最佳实践设置<ul><li>Kafka的动态分区：因为生产环境经常需要对数据源kafka进行扩缩容，所以一定要设置动态分区发现，避免丢失数据。</li></ul></li><li>连接器可插拔化：自定义连接器，使得不同环境只需采用不同参数控制</li></ul><h2 id="中层API：Window">中层API：Window</h2><p>为了进一步提升效率，我会去想一想有没有更好的实现，可以不用自己管理状态。这时通过翻阅相关文档发现可以使用Window API，只需自定义Trigger就可以优雅地实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">DataStream&lt;Tuple3&lt;String, Long, Integer&gt;&gt; dataStream = ...;<br><br>dataStream.keyBy(value -&gt; value.f0)<br>    .window(TumblingEventTimeWindows.of(Time.days(<span class="hljs-number">1</span>), Time.hours(-<span class="hljs-number">8</span>)))<br>    .trigger(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Trigger</span>&lt;Tuple3&lt;String, Long, Integer&gt;, Window&gt; () &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ValueStateDescriptor&lt;Integer&gt; stateDesc =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueStateDescriptor</span>&lt;&gt;(<span class="hljs-string">&quot;agg&quot;</span>, Integer.class);<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> TriggerResult <span class="hljs-title function_">onElement</span><span class="hljs-params">(Tuple3&lt;String, Long, Integer&gt; element, <span class="hljs-type">long</span> timestamp, Window window,</span><br><span class="hljs-params">                TriggerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-comment">// 更新状态</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">agg</span> <span class="hljs-operator">=</span> element.f2;<br>            ValueState&lt;Integer&gt; aggState = ctx.getPartitionedState(stateDesc);<br>            <span class="hljs-keyword">if</span> (aggState.value() != <span class="hljs-literal">null</span>) &#123;<br>                agg += aggState.value();<br>            &#125;<br>            aggState.update(agg);<br><br>            <span class="hljs-comment">// 判断阈值</span><br>            <span class="hljs-keyword">if</span> (agg &gt;= THRESHOLD) &#123;<br>                <span class="hljs-keyword">return</span> TriggerResult.FIRE;<br>            &#125;<br>            <span class="hljs-keyword">return</span> TriggerResult.CONTINUE;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> TriggerResult <span class="hljs-title function_">onProcessingTime</span><span class="hljs-params">(<span class="hljs-type">long</span> time, Window window, TriggerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">return</span> TriggerResult.CONTINUE;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> TriggerResult <span class="hljs-title function_">onEventTime</span><span class="hljs-params">(<span class="hljs-type">long</span> time, Window window, TriggerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">return</span> TriggerResult.CONTINUE;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(Window window, TriggerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            ctx.getPartitionedState(stateDesc).clear();<br>        &#125;<br>    &#125;)<br>    .reduce((value1, value2) -&gt; value2, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessWindowFunction</span>&lt;Tuple3&lt;String, Long, Integer&gt;, String, String, TimeWindow&gt;() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String key,</span><br><span class="hljs-params">                ProcessWindowFunction&lt;Tuple3&lt;String, Long, Integer&gt;, String, String, TimeWindow&gt;.Context context,</span><br><span class="hljs-params">                Iterable&lt;Tuple3&lt;String, Long, Integer&gt;&gt; elements, Collector&lt;String&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            out.collect(<span class="hljs-string">&quot;Alert Happens&quot;</span>);<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>窗口算子会在窗口时间结束时自动清理窗口状态，所以不用我们操心状态。但窗口默认是在窗口结束时触发计算，所以我们需要自定义触发器，使得在达到阈值条件时马上触发。<br /></p><p>这里需要注意的一个问题是：窗口聚合时使用ProcessWindowFunction 会保留窗口内全量元素导致状态过大，所以这里我们利用ReduceFunction 实现增量聚合，节约状态空间。</p><h2 id="上层API：SQL">上层API：SQL</h2><p>虽然刚开始时没有想过Flink SQL的实现，但为了内容的完整性，也再次补充相应实现，其他内容见后续：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 状态保留时间</span><br><span class="hljs-keyword">SET</span> table.exec.state.ttl <span class="hljs-operator">=</span> <span class="hljs-number">2</span> d;<br><span class="hljs-keyword">SELECT</span><br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyyMMdd&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    `key_word` <span class="hljs-keyword">AS</span> `key`,<br>    <span class="hljs-built_in">MAX</span>(`<span class="hljs-type">time</span>`) <span class="hljs-keyword">AS</span> `<span class="hljs-type">time</span>`,<br>    <span class="hljs-built_in">SUM</span>(`key1`) <span class="hljs-keyword">AS</span> `metric`<br><span class="hljs-keyword">FROM</span><br>    `dwd_log`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyyMMdd&#x27;</span>), `key_word`<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(`key1`) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h2 id="源码实现：Operator">源码实现：Operator</h2><p>做需求的同时需要有技术沉淀，当接手了几个类似的需求时，就可以慢慢去总结思考：有没有可能不用每次需求来的时候去开发代码，可不可以只需要配置相应规则，就可以马上生效。</p><p>具体的实现可以参考之前的文章——<a href="https://syntomic.github.io/2023/07/15/Flink%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/">Flink规则引擎</a></p><ul><li>利用广播流实现动态规则下放</li><li>仿造<code>WindowOperator</code>原理实现自定义窗口配置</li></ul><p>但DataStream API中窗口采用复制的实现，细粒度的滑动窗口会导致状态和定时器的膨胀，会有性能问题，而Flink SQL采用<code>WindowSlice</code>实现，将滑动窗口转化为滚动窗口，尽可能地复用中间结果，降低状态压力。详情可见<a href="https://www.jianshu.com/p/73acf8e3f15b">Flink SQL窗口表值函数（Window TVF）聚合实现原理浅析</a>，后续可以借鉴相应思想继续优化~</p><h1>Flink SQL</h1><p>当大家都习惯了用一项技术进行开发时，你需要说服他人使用新的技术，就必须充分论证新的技术优势性。而Flink SQL这项技术的引入就是因为在累计在线人数这个问题上优势得到了体现。</p><h2 id="技术引入">技术引入</h2><p>最开始我们采用了BloomFilter在底层API维护相应状态实现，但当数据规模大幅增加后，产生了数据倾斜问题，大量数据在一个节点计算，作业经常出问题。这时候刚好Flink 1.13发布，增加了累计窗口的功能，且只需通过设置拆分 distinct 聚合参数即可解决数据倾斜问题，正是引入Flink SQL的时机。此时我们的实时计算平台对Flink SQL的支持有限，但正是之前利用底层API开发应用的经验，让我可以利用Table API包装一层，达到类似只需写SQL的效果~</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;table.optimizer.distinct-agg.split.enabled&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span><br>    DATE_FORMAT(`window_start`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    DATE_FORMAT(`window_end`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) <span class="hljs-keyword">AS</span> `window_end`,<br>    `key_word` <span class="hljs-keyword">AS</span> `dim`,<br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> `key2`) <span class="hljs-keyword">AS</span> `metric`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">TABLE</span>(CUMULATE(<span class="hljs-keyword">TABLE</span> `dwd_log`, DESCRIPTOR(`rowtime`), <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;1&#x27;</span> MINUTES, <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;1&#x27;</span> DAYS))<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `key_word`, `window_start`, `window_end`;<br></code></pre></td></tr></table></figure><p>随着业务对实时数据稳定性要求越来越高，我们也做了一些工作进行运维保障：</p><ul><li>由于当时平台还未支持动态扩缩容，所以我们通过详细地压测得出合适的作业参数设置。</li><li>配置作业状态，消费延迟等监控，第一时间处理作业异常问题。</li><li>迁移专有集群，保障作业稳定性。</li></ul><p>同时为了进一步地推广使用Flink SQL，必须简化上手复杂性，并增强功能。这时我就去研究开发了Flink SQL SDK。</p><h2 id="Flink-SQL-SDK">Flink SQL SDK</h2><p>首先为了提升Flink SQL的开发效率，实现了基础Java代码和SQL代码的解耦， 统一管理SQL代码，开发者虽然仍需克隆相应Java代码，但只需编写SQL就可以直接运行，无需编写原生代码。</p><p>其次为了提升Flink SQL的功能，自定义<code>ClassLoder</code>动态加载UDF和Connector等相应Jar包，可以在不改动基础代码的前提下，增强SQL的表达能力，实现可参考<a href="https://www.toutiao.com/article/6883793897495986691/?wid=1646229198420">FlinkSQL 动态加载 UDF 实现思路</a>。</p><p>最后为了推广Flink SQL的使用，利用UDTF和自定义Kafka多Topic Sink实现之前原生作业从全量数据中解析相应不同关键字到不同Topic的功能，同时也避免了<a href="https://issues.apache.org/jira/browse/FLINK-21573">Flink SQL UDF重复调用的BUG</a>。</p><p>虽然随着实时计算平台的不断发展，对SQL的支持在不断增强，可以直接通过Flink SQL网关进行SQL提交，可能Flink SQL SDK就没什么作用了，又逐渐退化成了SQL Boy。但这次通过相对底层地去赋予SQL更多能力，希望在实现<strong>SQL Is All Your Need</strong>的路途上也留下自己的足迹。</p><h1>PyFlink</h1><p>随着数据分析和AI的发展，Python越来越流行，故Flink与Python生态的结合就会带来更多的可能性。在游戏反外挂的场景中，我们需要根据不同策略处理数据特征，实时筛选出开挂玩家进行处罚，而这里的策略一般会是安全人员采用的Python脚本编写，同时还会有复杂的算法策略，这正好就是PyFlink发挥的舞台~</p><h2 id="技术引入-2">技术引入</h2><p>其实最开始我们是利用Jython让Python运行在JVM中实现，但Jython缺乏维护且兼容性太差，有时甚至需要手动将Python代码翻译成Java代码，难以应对复杂的需求。但随着实时平台支持PyFlink后，只需简单调用用户脚本即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoUDF</span>(<span class="hljs-title class_ inherited__">ScalarFunction</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self, function_context: FunctionContext</span>):<br>model_path = <span class="hljs-string">&quot;your model path&quot;</span><br>        script_path = <span class="hljs-string">&quot;your python script path&quot;</span><br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(script_path, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            code = f.read()<br><br>        <span class="hljs-comment"># ! set globals to find user functions</span><br>        <span class="hljs-built_in">exec</span>(code, <span class="hljs-built_in">globals</span>())<br><br>        self.model = user_open(model_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eval</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">return</span> user_eval(self.model, value)<br></code></pre></td></tr></table></figure><p>PyFlink有两种模式：进程模式和线程模式。进程模式是靠Python进程和Java进程中进行通信，会有更好的资源隔离性，但会带来数据序列化上的性能损耗。而线程模式采用外部函数接口(FFI)，避免数据的序列化，带来更好的性能。但在实践中也遇到了一些问题：</p><ul><li>算子链：在开发原生Flink应用时，是尽可能将不同算子链在一起，避免数据在不同算子间的序列化性能损耗，但涉及到Python算子时，需要避免算子链，让Python算子获得充分资源。</li><li>CPU密集：和原生Flink应用大多是内存密集型的不同，Python算子很可能会是CPU密集的，这是就需要调整CPU资源才能提升运行效率。</li><li>实现方式：利用PyFlink + DataStream API 和 Flink SQL + Python UDF在相同资源下运行相同作业，发现Flink SQL + Python UDF运行效率会差很多，这个有可能是平台资源控制的问题，可惜这个问题暂时还没有答案。。<ul><li>采用Flink SQL + Python UDF可以复用代码，而改用PyFlink提交作业，需要将基础的Java代码转化为Python代码，会比较麻烦，这是我发现这个问题的原因。</li></ul></li></ul><h2 id="流批一体">流批一体</h2><p>随着大数据的发展，涌现了各种各样的组件，比如存储有文件系统HDFS、消息队列Kafka, 计算离线用Spark、实时用Flink, 导致开发和维护成本都比较高。对开发而言，由于离线和实时采用不同的组件开发，最麻烦就是离线和实时的一致性保证。比如在安全业务中，需要离线统计算法策略命中人员的概率分布时，需要将实时代码全改为PySpark代码，费时费力。<br /></p><p>但计算流批一体是Flink的一个特性，只需改动相应Connector，就可以离线运行，大大提升开发效率，而且简单对比了下，在同样资源下Flink效率甚至比Spark高。同时数据湖的概念也正在兴起，如果再利用数据湖实现存储流批一体，那未来对普通开发人员而言，应该不会再区分实时和离线，只需要用一份相同的SQL代码，就能完成各种数据开发工作，那时真正的挑战将是对业务的理解。</p><h1>总结</h1><p>从写离线SQL进入大数据领域, 到不满足于SQL Boy, 开始接触Flink，从底层API写起，最终又回到了SQL。也许之后大数据系统会回归到数据密集型的分布式系统，统一用SQL甚至自然语言作为开发，但希望在这一旅途中留下自己的足迹~</p>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据去重统计</title>
    <link href="/2023/08/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E7%BB%9F%E8%AE%A1/"/>
    <url>/2023/08/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>Unique Visitor(UV)是大数据统计中常见一个指标，但由于其自身的不可加性，常常会碰见性能瓶颈。本文我们将对比几种常见计算UV的方法，了解其原理以及特点。</p><span id="more"></span><h1>一点数学</h1><ul><li>基数(Cardinality)定义：一个集合中不同元素的个数</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">}</mo><mo>⟹</mo><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">A = \{1, 3, 3, 5\} \Longrightarrow |A| = 3 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></span></p><blockquote><p>当元素个数有限时，我们可以清楚地计算基数，但当元素个数无限时，奇怪的事就会发生，比如无穷 ∞ 和 ∞  + 1谁大？有兴趣的可以查看<a href="https://zhuanlan.zhihu.com/p/27078717">希尔伯特旅馆悖论</a></p></blockquote><h1>Set</h1><ul><li>实现：Java中提供Set数据结构存储不重复的元素集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Long&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">1L</span>, <span class="hljs-number">3L</span>, <span class="hljs-number">3L</span>, <span class="hljs-number">5L</span>));<br>System.out.println(set.size())<br></code></pre></td></tr></table></figure><ul><li>这也是SQL中<code>Count Distinct</code>语法背后的实现方法</li><li>特点：<ul><li>对任何数据类型都是绝对精确的</li><li>但存储占用大：一亿64位整数需要10000000 * 64 / (8 * 1024 * 1024) = 762.9MB</li></ul></li><li>优化：虽然集合的存储计算消耗大，但我们也有很多方法去优化计算<ul><li>一般我们是直接采取下列SQL计算用户数：</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">day</span>, <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> user_id)<br><span class="hljs-keyword">FROM</span> T<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">day</span><br></code></pre></td></tr></table></figure><ul><li>但当有数据倾斜的时候，我们可以采用分桶优化：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">day</span>, <span class="hljs-built_in">SUM</span>(cnt)<br><span class="hljs-keyword">FROM</span> (<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">day</span>, <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> user_id) <span class="hljs-keyword">as</span> cnt<br>    <span class="hljs-keyword">FROM</span> T<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">day</span>, <span class="hljs-built_in">MOD</span>(HASH_CODE(user_id), <span class="hljs-number">1024</span>)<br>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">day</span><br></code></pre></td></tr></table></figure><p><img src="https://nightlies.apache.org/flink/flink-docs-release-1.17/fig/table-streaming/distinct_split.png" alt="distinct_split"></p><blockquote><p>注: HashSet利用hashCode作为索引，如果hash冲突怎么办？参考<a href="https://www.baeldung.com/java-hashmap#collisions">Java HashMap</a></p></blockquote><h1>Bitmap</h1><ul><li>原理: Bitmap将具体数据映射到bit数组中，并将相应bit位设置为1</li></ul><table><thead><tr><th>0</th><th>1</th><th>0</th><th>1</th><th>0</th><th>1</th><th>0</th><th>0</th></tr></thead></table><p>可见Bitmap可以利用位运算高效地进行合并统计</p><h2 id="BitSet">BitSet</h2><ul><li>实现：Java中提供BitSet数据结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BitSet</span> <span class="hljs-variable">bitset</span> <span class="hljs-operator">=</span> BitSet.valueOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[] &#123;<span class="hljs-number">1L</span>, <span class="hljs-number">3L</span>, <span class="hljs-number">3L</span>, <span class="hljs-number">5L</span>&#125;)<br>System.out.println(bitset.cardinality())<br></code></pre></td></tr></table></figure><ul><li>特点<ul><li>对整型数据结构完全精确，且占用空间小，一亿数据只需10000000 / （8 * 1024 * 1024）= 11.9MB</li><li>数据稀疏时空间浪费：存入<code>1, 8888, 99999999</code>这三个数据时，需要至少建立一个99999999长度的 BitMap，但是实际上只存了3个数据</li></ul></li></ul><h2 id="RoaringBitmap">RoaringBitmap</h2><ul><li>原理：将32整数按照高16位分桶，并将底16位放入相应的Container中<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d0f7e69f74a8e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png#id=r99af&amp;originHeight=852&amp;originWidth=1340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><ul><li>Array Container: 变长short数组，最大容量超过4096时转换为Bitmap Container</li><li>Bitmap Container: long数组，恒定容量为1024，固定占用内存8kb</li><li>Run Container：边长short数组，利用行程编码数据，比如<code>11,12,13,14</code>将会被编码为<code>11,3</code>。故Run Container压缩效果最小为4b(全连续)，最大为128kb(全奇数或偶数)<br><img src="https://pic2.zhimg.com/v2-4a6c83760984e3aa562432eeae79b399_b.png#id=GHWUV&amp;originHeight=388&amp;originWidth=720&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li></ul></li><li>实现<ul><li>引入相应依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.roaringbitmap<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>RoaringBitmap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RoaringBitmap</span> <span class="hljs-variable">roaringBitmap</span> <span class="hljs-operator">=</span> RoaringBitmap.bitmapOf(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>System.out.println(roaringBitmap.getCardinality());<br></code></pre></td></tr></table></figure><ul><li>特点<ul><li>对整型数据绝对精确，可以实现高效压缩</li></ul></li><li>优化<ul><li>整数超出32位整数(42亿)范围: 可以采用64位RoaringBitmap</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Roaring64Bitmap</span> <span class="hljs-variable">roaring64Bitmap</span> <span class="hljs-operator">=</span> RoaringBitmap.bitmapOf(<span class="hljs-number">1L</span>, <span class="hljs-number">3L</span>, <span class="hljs-number">3L</span>, <span class="hljs-number">5L</span>);<br>System.out.println(roaring64Bitmap.getCardinality());<br></code></pre></td></tr></table></figure><ul><li>数据类型不是整数：采用全局字典，例如<a href="https://www.alibabacloud.com/help/zh/hologres/use-cases/remove-duplicate-uvs-in-real-time">Flink + Hologres</a><br><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/1434855461/p407566.png#id=EfxgK&amp;originHeight=469&amp;originWidth=730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li></ul><h2 id="Bloom-Filter">Bloom Filter</h2><p>计数其实也可以转化为判断元素存在的问题，可以利用Bloom Filter数据结构。</p><ul><li>原理：将x,y,z三个元素通过三个不同的hash函数映射到bitmap中。当查询元素w时，通过hash函数计算是否全为1，如有一个为0，则元素不在该集合中<br><img src="https://cdnd.selectdb.com/assets/images/Bloom_filter.svg-9ad88beea5ebb916ea2d0ac27eb5a5cf.png#id=ikRgl&amp;originHeight=460&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><ul><li>由于hash冲突的问题，Bloom Filter会有假阳性(False Positive), 但不会有假阴性(False Negative)</li></ul></li><li>实现：<ul><li>引入依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>32.1.2-jre<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 容量为500、百分之1假阳性的Bloom Filter */</span><br>BloomFilter&lt;Integer&gt; filter = BloomFilter.create(<br>    Funnels.integerFunnel(),<br>    <span class="hljs-number">500</span>,<br>    <span class="hljs-number">0.01</span>);<br>filter.put(<span class="hljs-number">1</span>);<br>filter.put(<span class="hljs-number">3</span>);<br>filter.put(<span class="hljs-number">5</span>);<br>System.out.println(filter.mightContain(<span class="hljs-number">2</span>));<br>System.out.println(filter.mightContain(<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><blockquote><p>旁注: Hash冲突的概率有多大？参考<a href="https://baike.baidu.com/item/%E7%94%9F%E6%97%A5%E6%82%96%E8%AE%BA/2715290">生日悖论</a></p></blockquote><h1>HyperLogLog</h1><p>其实在大多数数据分析中，并不要求绝对精确，这个时候就可以引入概率统计算法，追求极致的性能~</p><ul><li>原理<ul><li>试想在均匀分布的数据集合中，去计算数据中最大连续0出现的个数<code>r</code>，我们大概率会猜测这个集合的基数为<code>2^r</code><br><img src="https://engineering.fb.com/wp-content/uploads/2018/12/HLL31.png?resize=1536,865#id=l9cra&amp;originHeight=865&amp;originWidth=1536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li><li>但如果只做一次实验的话，方差会太大，所以我们采用分桶<code>m</code>平均的方法减少方差<br><img src="https://engineering.fb.com/wp-content/uploads/2018/12/HLL5.png?resize=1536,865#id=xAM8B&amp;originHeight=865&amp;originWidth=1536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><ul><li>基数估计：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>A</mi><msub><mi mathvariant="normal">∣</mi><mrow><mi>h</mi><mi>l</mi><mi>l</mi></mrow></msub><mo>=</mo><mi>C</mi><mi>O</mi><mi>N</mi><mi>S</mi><mi>T</mi><mi>A</mi><mi>N</mi><mi>T</mi><mo>∗</mo><mi>m</mi><mo>∗</mo><mfrac><mi>m</mi><mrow><msubsup><mo>∑</mo><mn>1</mn><mi>m</mi></msubsup><msup><mn>2</mn><mrow><mo>−</mo><msub><mi>r</mi><mi>i</mi></msub></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">|A|_{hll} = CONSTANT * m * \frac{m} {\sum_{1}^{m} 2^{-r_i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">ll</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">CONST</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">NT</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2654em;vertical-align:-0.57em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7047em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-2.8971em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3214em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7492em;"><span style="top:-2.8326em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.0278em;margin-right:0.1em;"><span class="pstrut" style="height:2.6595em;"></span><span class="mord mathnormal mtight">i</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3147em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.57em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>误差分析：误差服从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo>=</mo><mn>1.04</mn><mi mathvariant="normal">/</mi><msqrt><mi>m</mi></msqrt></mrow><annotation encoding="application/x-tex">\sigma = 1.04 / \sqrt{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0503em;vertical-align:-0.25em;"></span><span class="mord">1.04/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">m</span></span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span></span>的正态分布, 例如当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><msup><mn>2</mn><mn>11</mn></msup></mrow><annotation encoding="application/x-tex">m = 2^{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span></span></span></span></span></span></span></span>时，99%的概率误差在7%内(3 sigma原则)</li><li>存储分析：当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><msup><mn>2</mn><mn>11</mn></msup></mrow><annotation encoding="application/x-tex">m = 2^{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span></span></span></span></span></span></span></span>以及<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">r = 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span>(最多记录32个0), 只需 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2048</mn><mo>∗</mo><mn>5</mn><mo>=</mo><mn>1.2</mn></mrow><annotation encoding="application/x-tex">2048 * 5 = 1.2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2048</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.2</span></span></span></span>kb就能估计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>27</mn></msup></mrow><annotation encoding="application/x-tex">2^{27}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">27</span></span></span></span></span></span></span></span></span></span></span></span>的基数</li></ul></li></ul></li><li>实现<ul><li>引入相应依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.agkn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hll<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HLL</span> <span class="hljs-variable">hll1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HLL</span>(<span class="hljs-number">13</span><span class="hljs-comment">/*log2m*/</span>, <span class="hljs-number">5</span><span class="hljs-comment">/*registerWidth*/</span>);<br><span class="hljs-comment">/** 需要先进行hash使数据均匀分布 */</span><br>hll.addRaw(<span class="hljs-number">1L</span>);<br>hll.addRaw(<span class="hljs-number">3L</span>);<br>hll.addRaw(<span class="hljs-number">5L</span>);<br>System.out.println(hll1.cardinality());<br></code></pre></td></tr></table></figure><ul><li>特点<ul><li>极致的性能：空间占用只需<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlog_2log_2N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></li><li>有一定的误差</li></ul></li></ul><blockquote><p>旁注：HLL的交集如何计算？可以利用<a href="https://baike.baidu.com/item/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/10146840">容斥原理计算</a>, 但误差会增大。</p></blockquote><h1>总结</h1><p>本篇文章我们总结了几种常用的大数据去重统计方法，每个方法都有其适用范围，希望可以帮助大家在不同的应用场景中选择相应合适的方法~</p>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>去重</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink规则引擎</title>
    <link href="/2023/07/15/Flink%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"/>
    <url>/2023/07/15/Flink%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<p>随着业务发展，对风控能力的要求会越来越高，比如丰富的事件类型处理、不同的统计方式计算、动态的规则配置支持等。本篇文章我们就来讨论如何利用Flink构建一个规则引擎，去解决这些问题，来支持风控平台的建设。</p><span id="more"></span><h1>风控业务</h1><ul><li>类型<ul><li>事先风控：提前辨识异常，避免风险事件的发生。</li><li>事中风控：实时识别异常，减少风险事件的影响。</li><li>事后风控：总结分析异常，防止类似事件再次产生。</li></ul></li><li>方法<ul><li>基于规则<ul><li>统计规则：例如5分钟以内访问次数大于100次</li><li>序列规则：例如用户点击、加入购物车、删除事件序列</li></ul></li><li>基于算法</li></ul></li><li>本篇文章只考虑利用统计规则做事中的风控：根据规则将实时数据源中异常事件筛选出来</li></ul><blockquote><p>文章所有代码见：<a href="https://github.com/syntomic/qflink/blob/main/qflink-rule/src/main/java/cn/syntomic/qflink/rule/RuleEngine.java">RuleEngineJob</a></p></blockquote><h1>设计</h1><ul><li>利用<a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/datastream/fault-tolerance/broadcast_state/">广播流</a>广播规则到各个算子上，然后数据遍历相应规则进行处理输出。原始思路可见<a href="https://flink.apache.org/2020/01/15/advanced-flink-application-patterns-vol.1-case-study-of-a-fraud-detection-system/">Flink官方博客</a></li></ul><p><img src="https://flink.apache.org/img/blog/2019-11-19-demo-fraud-detection/end-to-end.png#id=bxQ4F&amp;originHeight=1278&amp;originWidth=2618&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id="Flink作业">Flink作业</h2><ul><li>利用参数划分作业处理规则的范围，一个作业只处理相同作业ID<code>job.id</code>的规则。</li><li>由于<a href="https://flink.apache.org/2020/04/15/flink-serialization-tuning-vol.-1-choosing-your-serializer-if-you-can/">Flink序列化效率的差别</a>, 所以一个作业只处理相同Schema的数据，这样的就能统一采用<code>Row</code>数据类型进行高效序列化。<br><img src="https://flink.apache.org/img/blog/2020-04-15-flink-serialization-performance-results.svg#id=s011r&amp;originHeight=587&amp;originWidth=1020&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><ul><li>这里我们引入<a href="https://docs.oracle.com/cd/E26161_02/html/GettingStartedGuide/avroschemas.html">Avro Schema</a>定义字段类型：</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;record&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rule_id&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;int&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>同时如果原始数据源量级比较大，我们可以先统一合并读取拆分出关心的数据，减少公共层压力, 所以这里也顺便提供了纯ETL的功能，通过作业参数<code>agg.enable = false</code>设置。</li></ul><h2 id="规则">规则</h2><ul><li>我们提供下列配置项<ul><li>过滤条件: 根据计算表达式过滤满足条件的数据</li><li>清洗条件<ul><li>正则解析</li><li>JSONPath解析</li><li>字段表达式</li></ul></li><li>分组条件：根据关注对象进行分组计算</li><li>窗口条件<ul><li>窗口类型：滚动/滑动/累积</li><li>窗口触发：单次/批次</li><li>窗口大小及偏移</li></ul></li><li>聚合条件<ul><li>聚合过滤：计算表达式</li><li>聚合方法：SUM/COUNT/COUNT DISTINCT等</li></ul></li><li>阈值条件：利用聚合指标的计算表达式判断</li><li>以及规则元数据<ul><li>规则ID：主键</li><li>规则状态：控制规则生效状态</li><li>作业ID: 匹配相应Flink作业</li></ul></li></ul></li><li>例子：将数据进行过滤、解析、字段映射、窗口聚合计算、阈值判断的整体流程</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;rule_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rule_state&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ACTIVE&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;job_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;expr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string.contains(raw, &#x27;stdout&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;raw&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;flat_map&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pattern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;) (.*?) (.*)&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;normal_fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;time&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;STRING&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key_word&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;STRING&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JSON&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;json_paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key1&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;expr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.key1&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;INT&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key2&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;expr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.key2&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;STRING&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;mapping_fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;is_odd&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BOOLEAN&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;expr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key1 % 2 == 1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;is_odd&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TUMBLE&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;trigger&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SINGLE&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">86400000</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;step&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;aggregates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;val_cnt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;inputs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;key2&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;COUNT_DISTINCT&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;threshold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;expr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;val_cnt &gt; 1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;val_cnt&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1>实现</h1><h2 id="Connector">Connector</h2><ul><li>Source：通过自定义<code>RowDeserializationSchema</code>根据传入的Avro Schema进行数据规范化</li><li>Sink：根据<code>TopicSelector</code>(Kafka)根据关键字拆分到不同Topic</li></ul><h2 id="ETL算子">ETL算子</h2><ul><li>规则流：根据规则状态更新广播状态</li><li>数据流：遍历所有广播状态中规则进行处理<ul><li>引入高性能、轻量级<a href="https://github.com/killme2008/aviatorscript/tree/master">Aviator</a>表达式引擎提升表达能力</li><li>如果下游需要聚合，根据<code>rule_id</code> + 按照<code>keys</code>字段取值进行分组。这样下游就相当于固定逻辑处理，减少代码复杂度。</li></ul></li></ul><blockquote><p>注1：因为我们这里可以得到规则相应的聚合条件，所以可以在ETL算子中做预聚合减少下游数据量，提升吞吐量。</p></blockquote><blockquote><p>注2: 遍历规则会导致数据重复, 当规则过多时可能会产生性能问题。这里可以先合并相同过滤+窗口+聚合条件的规则, 减少处理压力。</p></blockquote><h2 id="AGG算子">AGG算子</h2><ul><li>Flink原生窗口算子不支持动态变更，所以我们需要设计重新窗口算子。</li><li>通过阅读<a href="https://blog.jrwang.me/2019/flink-source-code-time-and-window/">Flink源码</a>可知窗口实现过程：<ul><li>通过<code>WindowAssigner</code>确定消息所在的窗口（可能属于多个窗口）</li><li>将数据根据<code>AggregateFunction</code>聚合到对应窗口的状态中</li><li>根据<code>Trigger</code>确定是否应该触发窗口结果的计算，如果使用 InternalWindowFunction 对窗口进行处理</li><li>注册<code>EventTimeTimer</code>定时器，进行窗口触发计算及结束时清理窗口状态</li><li>如果数据延迟到达，提交到<code>SideOutput</code>中</li></ul></li><li>所以只要我们先从广播状态中根据当前分组拿到相应规则，就可以模拟窗口算子的逻辑，实现窗口的动态配置~</li><li>这里需要注意一些问题：<ol><li>窗口触发：因为需要处理数据和规则的双流输入，而Flink的Watermark是取得双流中最小的Watermark，所以这里我们需要定义规则流的Watermark为周期性触发的<code>Long.MAX_VALUE</code>，这样才不会影响数据流正常窗口触发计算。</li><li>状态清理：但规则移除后，肯定希望清理相应规则下的所有累积状态，要不然之后肯定会OOM。这里我们在移除广播流规则时，可以根据规则ID拿到规则相关的所有聚合状态进行删除。删除时也要注意并发问题，可以采用先复制相应键进行避免。</li><li>聚合计算：因为DataStream API中窗口是利用数据复制实现的，长时间周期，短步长的窗口类型会导致严重的性能问题。这里可以借鉴SQL API中<a href="https://www.jianshu.com/p/a990e113b042">Window slice</a>实现。</li></ol></li></ul><blockquote><p>注: 这里采用<code>AbstractStreamOperator</code>实现而不是标准的<code>KeyedBroadcastProcessFunction</code>实现是因为需要得到窗口触发时对应的窗口对象，需要利用底层状态的<code>Namespace</code>进行判断。</p></blockquote><h1>测试</h1><ul><li>作为一个通用型的平台作业，所有需要编写相应的单元测试、算子测试、作业测试保证代码质量，具体操作可见<a href="https://nightlies.apache.org/flink/flink-docs-release-1.17/docs/dev/datastream/testing/">Flink测试</a>。<ul><li>这里我们将source 和 sink 设置成可插拔的，可以在不改动代码的条件下实现作业测试。</li></ul></li></ul><h1>业界实现</h1><ul><li>社区提出<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=195730308">动态CEP的提案</a>, 希望提供动态CEP规则的支持，但暂时还没实现。</li><li>不过业界有对应实现：<ul><li><a href="https://developer.aliyun.com/article/994446">阿里</a>：<a href="https://help.aliyun.com/zh/flink/developer-reference/definitions-of-rules-in-the-json-format-in-dynamic-flink-cep?spm=a2c4g.11186623.0.0.559f3086jvWbnz#concept-2258817">商业版本</a></li><li><a href="https://mp.weixin.qq.com/s/PT8ImeOOheXR295gQRsN8w">字节</a></li></ul></li><li>我们提供的思路也可以去实现相应的动态CEP，不过感觉CEP的配置过于复杂，需要更好地设计前端平台，降低使用门槛是关键。</li></ul><h1>总结</h1><p>本篇文章我们详细讨论了如何利用Flink构建规则引擎支持风控平台的建设，得到了一些构建复杂数据处理应用的经验，也更加深入理解了Flink处理数据的原理，向知其所以然迈向了坚实的一步~</p>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flink</tag>
      
      <tag>风控</tag>
      
      <tag>架构</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Is All Your Need: Flink Dynamic SQL</title>
    <link href="/2023/06/15/SQL-Is-All-Your-Need-Flink-Dynamic-SQL/"/>
    <url>/2023/06/15/SQL-Is-All-Your-Need-Flink-Dynamic-SQL/</url>
    
    <content type="html"><![CDATA[<p>实时监控是Flink一个重要且复杂的应用场景，所以一般不会只采用SQL去实现。但本篇文章我们将从一个简单的问题出发，挑战只使用SQL来满足逐渐复杂的需求，希望最终可以再次拓宽SQL的使用边界。</p><span id="more"></span><h1>事先准备</h1><ul><li>我们有日志流如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `dwd_log` (<br>    `<span class="hljs-type">time</span>` STRING COMMENT <span class="hljs-string">&#x27;事件时间&#x27;</span>,<br>    `key_word` STRING COMMENT <span class="hljs-string">&#x27;日志标识&#x27;</span>,<br>    `key1` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;指标&#x27;</span>,<br>    `key2` STRING COMMENT <span class="hljs-string">&#x27;维度&#x27;</span><br>) <span class="hljs-keyword">WITH</span> (<br>    ...<br>);<br></code></pre></td></tr></table></figure><ul><li>数据示例如下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;&quot;<span class="hljs-selector-tag">time</span>&quot;:<span class="hljs-string">&quot;2023-04-09 15:40:05&quot;</span>,<span class="hljs-string">&quot;key_word&quot;</span>:<span class="hljs-string">&quot;stdout&quot;</span>,<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;val1&quot;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>我们将根据一些规则从这个日志流中筛选出关注的事件。</li></ul><h1>阶段一：需求的开始</h1><blockquote><p>规则1：日志关键字为<code>stdout</code>每天不同维度<code>key2</code>下获得指标<code>key1</code>次数大于1的事件</p></blockquote><ul><li>这个规则可以用简单的SQL实现如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> `rule_id`,<br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd 00:00:00&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    `key2` <span class="hljs-keyword">AS</span> `key`,<br>    <span class="hljs-built_in">MAX</span>(`<span class="hljs-type">time</span>`) <span class="hljs-keyword">AS</span> `alert_time`,<br>    MAP[<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-built_in">CAST</span>(<span class="hljs-built_in">COUNT</span>(`key1`) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">DOUBLE</span>)] <span class="hljs-keyword">AS</span> `alert_metrics`<br><span class="hljs-keyword">FROM</span><br>    `dwd_log`<br><span class="hljs-keyword">WHERE</span><br>    `key_word` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;stdout&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    `key2`,<br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd 00:00:00&#x27;</span>)<br><span class="hljs-keyword">HAVING</span><br>    <span class="hljs-built_in">COUNT</span>(`key1`) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ul><li>所以对这种单个简单的统计规则，用Flink SQL实现会非常方便，但当规则越来越多时呢？</li></ul><h1>阶段二：需求的增长</h1><blockquote><p>规则2：不同日志关键字<code>stdout</code>每小时去重维度<code>key2</code>数量大于2的事件</p></blockquote><ul><li>当多个类似的需求出现时，最简单的方法是再起个作业计算，但我们这里想在一个作业里实现，可以直接将不同规则<code>UNION</code>起来：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> `rule_id`,<br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd 00:00:00&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    `key2` <span class="hljs-keyword">AS</span> `key`,<br>    <span class="hljs-built_in">MAX</span>(`<span class="hljs-type">time</span>`) <span class="hljs-keyword">AS</span> `alert_time`,<br>    MAP[<span class="hljs-string">&#x27;key1_cnt&#x27;</span>, <span class="hljs-built_in">CAST</span>(<span class="hljs-built_in">COUNT</span>(`key1`) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">DOUBLE</span>)] <span class="hljs-keyword">AS</span> `alert_metrics`<br><span class="hljs-keyword">FROM</span><br>    `dwd_log`<br><span class="hljs-keyword">WHERE</span><br>    `key_word` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;stdout&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    `key2`,<br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd 00:00:00&#x27;</span>)<br><span class="hljs-keyword">HAVING</span><br>    <span class="hljs-built_in">COUNT</span>(`key1`) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> `rule_id`,<br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:00:00&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    `key_word` <span class="hljs-keyword">AS</span> `key`,<br>    <span class="hljs-built_in">MAX</span>(`<span class="hljs-type">time</span>`) <span class="hljs-keyword">AS</span> `alert_time`,<br>    MAP[<span class="hljs-string">&#x27;key2_cnt&#x27;</span>, <span class="hljs-built_in">CAST</span>(<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> `key2`) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">DOUBLE</span>)] <span class="hljs-keyword">AS</span> `alert_metrics`<br><span class="hljs-keyword">FROM</span><br>    `dwd_log`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    `key_word`,<br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:00:00&#x27;</span>)<br><span class="hljs-keyword">HAVING</span><br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> `key2`) <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><ul><li>虽然这样实现逻辑简单，但涉及重复消费，计算消耗大，且将规则硬编码在代码中，不够灵活。我们需要在达到临界点时之前找到更好的解决方法。</li></ul><h1>阶段三：需求的爆发</h1><ul><li>我们看到当类似的需求增长后，将面临以下问题：<ul><li>重复消费导致的计算资源浪费</li><li>合并后代码过长导致无法维护</li><li>硬编码导致规则没有灵活调整</li></ul></li><li>所以这时需要重构SQL代码，找到一种不用改变SQL又能支持规则CRUD的方法<ul><li>仔细思考一下现有的规则1和规则2，发现它们都是由相同的部分组成<ul><li>过滤规则：对应<code>WHERE</code>条件</li><li>分组规则：对应监控对象, 规则1中的<code>key2</code>字段以及规则2中的<code>key_word</code>字段</li><li>窗口规则：对应监控周期，规则1中的<code>天</code>以及规则2的<code>小时</code></li><li>聚合规则：对应聚合计算，规则1中的<code>COUNT</code>方法以及规则2中的<code>COUNT DISTINCT</code>方法</li><li>阈值规则：对应<code>HAVING</code>条件</li></ul></li></ul></li><li>这时我们可以抽象出一个规则模型，将规则放入另外一张(Paimon)表中维护</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `dim_rule` (<br>    `rule_id` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;规则id&#x27;</span>,<br>    `job_id` STRING COMMENT <span class="hljs-string">&#x27;处理规则作业id&#x27;</span>,<br>    `<span class="hljs-keyword">filter</span>` STRING COMMENT <span class="hljs-string">&#x27;过滤规则&#x27;</span>,<br>    `key` STRING COMMENT <span class="hljs-string">&#x27;分组规则&#x27;</span>,<br>    `<span class="hljs-keyword">window</span>` STRING COMMENT <span class="hljs-string">&#x27;窗口规则&#x27;</span>,<br>    `aggregate` <span class="hljs-type">ROW</span><span class="hljs-operator">&lt;</span>`name` STRING, `input` STRING, `<span class="hljs-keyword">method</span>` STRING<span class="hljs-operator">&gt;</span> COMMENT <span class="hljs-string">&#x27;聚合规则&#x27;</span>,<br>    `threshold` STRING COMMENT <span class="hljs-string">&#x27;阈值规则&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(`rule_id`) <span class="hljs-keyword">NOT</span> ENFORCED<br>);<br></code></pre></td></tr></table></figure><ul><li>规则示例为：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;rule_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;job_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key_word==&#x27;stdout&#x27;&quot;</span><span class="hljs-punctuation">,</span> -- 实际为EXPR$<span class="hljs-number">0</span>==&#x27;stdout&#x27;<br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key2&quot;</span><span class="hljs-punctuation">,</span> -- 实际为EXPR$<span class="hljs-number">2</span><br>    <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;DAY&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;aggregate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key1_cnt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key1&quot;</span><span class="hljs-punctuation">,</span> -- 实际为EXPR$<span class="hljs-number">1</span><br>        <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;COUNT&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;threshold_rule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key1_cnt&gt;1&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>有了规则的抽象之后，我们就可以拿日志数据去关联规则，然后根据规则去做具体的处理，当然这里就需要引入几个UDF来增强SQL的表达能力(这里我们不去讨论UDF<a href="https://github.com/syntomic/qflink/tree/main/qflink-sql/qflink-sql-udf/src/main/java/cn/syntomic/qflink/sql/udf">具体实现</a>)<ul><li><code>dynamic_key</code>(UDF): 根据分组规则取日志中的相应值</li><li><code>dynamic_window</code>(UDF)：根据窗口规则划分日志到相应窗口，类似之前的<code>DATE_FORMAT</code>函数</li><li><code>dynamic_filter</code>(UDF)：根据过滤规则或阈值规则的表达式，判断表达式是否满足条件</li><li><code>dynamic_agg</code>(UDAF)：根据聚合规则中计算聚合值，最终输出<code>指标名：值</code>的映射</li></ul></li><li>重构后的代码如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    `rule_id`,<br>    `window_start`,<br>    `key`,<br>    <span class="hljs-built_in">MAX</span>(`<span class="hljs-type">time</span>`) <span class="hljs-keyword">AS</span> `alert_time`,<br>    <span class="hljs-comment">-- 根据聚合规则进行计算</span><br>    dynamic_agg(`data`, `aggregate`) <span class="hljs-keyword">AS</span> `alert_metrics`<br><span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-keyword">SELECT</span><br>            `rule_id`,<br>            dynamic_window(`<span class="hljs-type">time</span>`, `<span class="hljs-keyword">window</span>`) <span class="hljs-keyword">AS</span> `window_start`,<br>            dynamic_key(`data`, `key`) <span class="hljs-keyword">AS</span> `key`,<br>            `aggregate`,<br>            `threshold`,<br>            `<span class="hljs-type">time</span>`,<br>            <span class="hljs-comment">-- 其中`data`为ROW(`key_word`, `key1`, `key2`)，由于规则中是不确定的，需要可以访问到日志中每一个字段</span><br>            `data`<br>        <span class="hljs-keyword">FROM</span><br>            `dwd_log` <span class="hljs-keyword">AS</span> `log`<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br>            <span class="hljs-comment">-- Paimon规则维表查询</span><br>            `dim_rule` <span class="hljs-keyword">FOR</span> <span class="hljs-built_in">SYSTEM_TIME</span> <span class="hljs-keyword">AS</span> <span class="hljs-keyword">OF</span> `log`.`proc_time` <span class="hljs-keyword">AS</span> `rule`<br>        <span class="hljs-comment">-- 只关联作业相关规则</span><br>        <span class="hljs-keyword">ON</span> `rule`.`job_id` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;test&#x27;</span><br>        <span class="hljs-keyword">WHERE</span><br>            <span class="hljs-comment">-- 根据规则过滤日志</span><br>            dynamic_filter(`data`, `<span class="hljs-keyword">filter</span>`) <span class="hljs-keyword">AND</span> `rule_id` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>    ) `log_with_rule`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    <span class="hljs-comment">-- 根据规则分组</span><br>    `key`, `rule_id`, `window_start`, `threshold`, `aggregate`<br><span class="hljs-keyword">HAVING</span><br>    <span class="hljs-comment">-- 根据阈值规则判断聚合结果是否超过阈值</span><br>    dynamic_filter(dynamic_agg(`data`, `aggregate`), `threshold`);<br></code></pre></td></tr></table></figure><blockquote><p>注：在实现过程中发现无法重命名<code>ROW</code>类型中字段，所以在上述规则示例中实际需要指定默认名，即<code>EXPR$0, EXPR$1, EXPR$2</code>。大家也可以思考一下为什么不用<code>MAP</code>类型?</p></blockquote><ul><li>经过这样的重构之后，SQL代码就固定了，所有操作只是针对规则的CRUD。但还会有什么其他问题吗？</li></ul><h1>阶段四：需求的挑战</h1><ul><li>上述方法采用维表关联，每来一条数据都需要对维表进行全表扫描，当日志和规则量级增加后，会带来相应的性能问题。虽然可以采用异步、缓存等<a href="https://paimon.apache.org/docs/master/how-to/lookup-joins/">SQL HINTS</a>缓解，但其实不是根本的解决方案。</li><li>幸好Paimon提供了增量读的功能，我们可以将规则表全部读取到Flink中，并可以捕获规则表中的数据变更，这样就和数据源解耦了，不会带来额外的性能压力。这只需改变一行代码就可以实现:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    ...<br><span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-keyword">SELECT</span><br>            ...<br>        <span class="hljs-keyword">FROM</span><br>            `dwd_log` <span class="hljs-keyword">AS</span> `log`<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br>            <span class="hljs-comment">-- 修改为常规的左连接</span><br>            `dim_rule` <span class="hljs-keyword">AS</span> `rule`<br>        <span class="hljs-keyword">ON</span> `rule`.`job_id` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;test&#x27;</span><br>        ...<br>    ) `log_with_rule`<br>...<br></code></pre></td></tr></table></figure><ul><li>看起来去利用SQL进行复杂监控的目标达到了，但事实真的是这样吗？</li></ul><h1>真相</h1><ul><li>其实我们还会碰见一系列棘手的问题：<ul><li>报警控制：SQL的实现周期内报警会反复触发报警，如需控制报警次数，只能下游再进行处理</li><li>窗口类型：SQL的实现只能在指定周期内实时累积，不能定时轮询(比如每天触发一次)</li><li>状态控制：SQL的实现当规则修改时没法细粒度地控制之前累积状态，作业在长期运行后会不堪重负等</li></ul></li><li>但实际工作中，我们大部分碰到的问题其实就是类似阶段一那样确定的规则，都可以利用SQL方便地进行解决。而从长远来看，上层的数据应用会变得更加简单，对于最终用户，所有的数据都可以使用SQL方式进行分析，这就是我理解的<code>SQL Is All Your Need</code>愿景。</li></ul><h1>总结</h1><ul><li>在本篇文章中看到了SQL解决复杂问题潜力，但也明白SQL解决问题的局限性，但这并不影响我们的愿景, 而且在随着AI的发展，可以憧憬仅用自然语言处理数据的时代，<strong><em>Keep up with the times</em></strong> ~</li></ul><blockquote><p>本文所有SQL代码可参考：<a href="https://github.com/syntomic/qflink/tree/main/qflink-sql/qflink-sql-sdk/src/test/resources/sqls/sql_is_all_your_need/flink_dynamic_sql">SQL IS ALL Your Need: Flink Dynamic SQL</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Flink SQL</tag>
      
      <tag>Paimon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Is All Your Need: Flink SQL UDF</title>
    <link href="/2023/05/11/SQL-Is-All-Your-Need-Flink-SQL-UDF/"/>
    <url>/2023/05/11/SQL-Is-All-Your-Need-Flink-SQL-UDF/</url>
    
    <content type="html"><![CDATA[<p>随着数据处理的逻辑变得越来越复杂，编写的SQL也会变得越加复杂，有时甚至会感觉SQL力不从心。这个时候就需要扩展SQL的表达能力，而UDF(用户自定义函数)就是这样一种扩张开发的机制，拓展系统的内置函数，实现自定义逻辑。本编文章我们就从具体场景出发，使用各种Flink UDF去优化或解决相关问题。</p><span id="more"></span><h1>事前准备</h1><ul><li>UDF大致有以下几种<ul><li>数值函数(UDF): 将标量值转换成一个新标量值，如：<code>DATE_FORMAT</code></li><li>表值函数(UDTF): 将标量值转换成新的行数据, 如：<code>EXPLODE</code></li><li>聚合函数(UDAF)：将多行数据里的标量值转换为成一个新标量值, 如：<code>SUM</code></li></ul></li><li>不同计算引擎有相应的实现方法，本编文章我们只考虑<a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/table/functions/udfs/">Flink自定义UDF</a><ul><li>继承相应类：<strong>注意输出输入类型推导</strong></li><li>实现相应方法</li><li>注册使用</li></ul></li></ul><blockquote><p>注：文中不会给出详细代码，只会对一些重要的地方给予说明，详细实现可到<a href="https://github.com/syntomic/qflink/tree/main/qflink-sql/qflink-sql-udf/src/main/java/cn/syntomic/qflink/sql/udf">代码库</a>中查看。</p></blockquote><h1>ETL</h1><p>文章<a href="https://syntomic.github.io/2023/04/28/SQL-Is-All-Your-Need-Flink-SQL/#ETL">SQL Is All Your Need: Flink SQL</a>中我们提出了一个问题，如何简化ETL中重复的SQL代码，现在我们就用UDTF来实现这一目的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `dwd_log`<br><span class="hljs-keyword">SELECT</span><br>    REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> `<span class="hljs-type">time</span>`,<br>    REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> `key_word`,<br><br>    <span class="hljs-built_in">JSON_VALUE</span>(REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;$.key1&#x27;</span> RETURNING <span class="hljs-type">INT</span>) <span class="hljs-keyword">AS</span> `key1`,<br>    <span class="hljs-built_in">JSON_VALUE</span>(REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;$.key2&#x27;</span>) <span class="hljs-keyword">AS</span> `key2`<br><span class="hljs-keyword">FROM</span><br>    `ods_log`<br></code></pre></td></tr></table></figure><ul><li>原因：上述SQL看起来冗长最重要的原因是需要先将每个字段用正则提取，然后再对字段进行相同JSON解析操作，导致了很多重复代码。</li><li>解决：可以在Flink SQL中编写UDTF，与常规的标量函数只能返回一个值不同，它可以返回任意多行，且每一行可以包含多列。通过LATERAL算子将外表(算子左侧)的每一行跟表值函数返回的所有行(算子右侧)进行笛卡尔积，这样就一次性提取多个字段，那我们的代码就能简化很多：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> q_regex_extract <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;cn.syntomic.qflink.sql.udf.table.QRegexExtract&#x27;</span> <span class="hljs-keyword">LANGUAGE</span> JAVA;<br><br><span class="hljs-keyword">SELECT</span><br>    `<span class="hljs-type">time</span>`,<br>    `key_word`,<br>    `json`<br><span class="hljs-keyword">FROM</span><br>    `ods_log`, <span class="hljs-keyword">LATERAL</span> <span class="hljs-keyword">TABLE</span>(q_regex_extract(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;key_word&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li>同样地，我们利用<a href="https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/table/hive/hive_functions/">hive module</a>使用hive函数一次性进行JSON解析</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">LOAD <span class="hljs-keyword">MODULE</span> hive <span class="hljs-keyword">WITH</span> (<span class="hljs-string">&#x27;hive-version&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3.1.3&#x27;</span>);<br><br><span class="hljs-keyword">SELECT</span><br>    `<span class="hljs-type">time</span>`,<br>    `key_word`,<br>    <span class="hljs-comment">-- json_tuple return string type</span><br>    <span class="hljs-built_in">CAST</span>(`key1` <span class="hljs-keyword">AS</span> <span class="hljs-type">INT</span>) <span class="hljs-keyword">AS</span> `key1`,<br>    `key2`<br><span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-comment">-- above sql</span><br>        ...<br>    ) a, <span class="hljs-keyword">LATERAL</span> <span class="hljs-keyword">TABLE</span>(json_tuple(`json`, <span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>)) <span class="hljs-keyword">AS</span> b(`key1`, `key2`);<br></code></pre></td></tr></table></figure><ul><li>这样我们就利用UDTF，减少了SQL中重复代码，形成统一的清洗逻辑，同时避免<a href="https://issues.apache.org/jira/browse/FLINK-21573">Flink重复计算的问题</a>，对比之前的实现就看起来逻辑更加清晰，也更加简洁~</li></ul><blockquote><p>注: 我们再自定义函数中<code>q_regex_extract</code>没有别名就可以直接相应字段, 这是因为我们自定义了类型推导, 而在函数<code>json_tuple</code>中就必须显示别名相应字段：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TypeInference <span class="hljs-title function_">getTypeInference</span><span class="hljs-params">(DataTypeFactory typeFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> TypeInference.newBuilder()<br>                .outputTypeStrategy(<br>                        callContext -&gt; &#123;<br>                            List&lt;Field&gt; fields = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(argsLen - <span class="hljs-number">2</span>);<br><br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; argsLen; i++) &#123;<br>                                <span class="hljs-comment">// use literal parameter as field name</span><br>                                <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span><br>                                        callContext<br>                                                .getArgumentValue(i, String.class)<br>                                                .orElse(<span class="hljs-string">&quot;f&quot;</span> + (i - <span class="hljs-number">2</span>));<br>                                fields.add(i - <span class="hljs-number">2</span>, DataTypes.FIELD(fieldName, DataTypes.STRING()));<br>                            &#125;<br><br>                            <span class="hljs-keyword">return</span> Optional.of(DataTypes.ROW(fields.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Field</span>[<span class="hljs-number">0</span>])));<br>                        &#125;)<br>                .build();<br>&#125;<br></code></pre></td></tr></table></figure><h1>Analysis</h1><p>文章<a href="https://syntomic.github.io/2023/04/28/SQL-Is-All-Your-Need-Flink-SQL/#Analysis">SQL Is All Your Need: Flink SQL</a>中我们计算了每分钟滑动窗口的UV。现在我们把问题变复杂一点：每分钟计算一次当天截至到目前的累积UV<br><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/cumulative.png" alt=""></p><ul><li>Flink SQL在1.13之后提供了累积窗口的计算方式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    DATE_FORMAT(`window_start`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    DATE_FORMAT(`window_end`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) <span class="hljs-keyword">AS</span> `window_end`,<br>    `key_word` <span class="hljs-keyword">AS</span> `dim`,<br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> `key2`) <span class="hljs-keyword">AS</span> `metric`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-keyword">TABLE</span>(CUMULATE(<span class="hljs-keyword">TABLE</span> `dwd_log`, DESCRIPTOR(`rowtime`), <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;1&#x27;</span> MINUTES, <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;1&#x27;</span> DAYS))<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `key_word`, `window_start`, `window_end`;<br></code></pre></td></tr></table></figure><ul><li>但如果需要我们自己实现的时候，似乎比较难以实现？我们这里只考虑离线的情况，因为Flink(1.15)离线计算时暂不支持累计窗口去重计算。</li><li>一种比较直接的想法是首先计算每天所有的时间窗口，然后与小于当前结束窗口的数据JOIN, 计算出相应时间窗口的基数。但这样计算会导致数据膨胀严重，当数据量大时会导致数据倾斜等问题。可以采取下列方法进行优化：<ul><li>累积窗口计算只需要当天分组下最早时间的记录，这样可以大大减少数据量。</li><li>调整相应资源以及参数实现自适应执行。</li></ul></li><li>其实大数据场景中有很多基数估算的方法，这里我们可以引入HLL(HyperLogLog) —— 基数统计的概率算法，用另外一种方法实现<ul><li>对HLL感兴趣的同学可以参考文章<a href="https://www.cnblogs.com/wmyskxz/p/12396393.html">神奇的HyperLogLog</a>，以及<a href="http://content.research.neustar.biz/blog/hll.html">线上演示Demo</a>。</li><li>HLL可以在1.2kb内存下估算高达1亿个元素，而只有2%的误差！</li><li>我们可以使用HLL数据结构这样去计算当天每分钟的累积人数：</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> hll_agg <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;cn.syntomic.qflink.sql.udf.aggregate.HLLAggregate&#x27;</span> <span class="hljs-keyword">LANGUAGE</span> JAVA;<br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> hll_cardinality <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;cn.syntomic.qflink.sql.udf.scalar.HLLCardinality&#x27;</span> <span class="hljs-keyword">LANGUAGE</span> JAVA;<br><br><span class="hljs-keyword">SELECT</span><br>    DATE_FORMAT(`min_time`, <span class="hljs-string">&#x27;yyyy-MM-dd 00:00:00&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    FROM_UNIXTIME(UNIX_TIMESTAMP(`min_time`) <span class="hljs-operator">+</span> <span class="hljs-number">60</span>) <span class="hljs-keyword">AS</span> `window_end`,<br>    `key_word` <span class="hljs-keyword">AS</span> `dim`,<br>    <span class="hljs-comment">-- 按照每分钟时间排序，合并第一行到当前行每分钟的HLL结构，并估算其基数</span><br>    hll_cardinality(hll_agg(min_hll) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> `key_word` <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `min_time`)) <span class="hljs-keyword">AS</span> `metric`<br><span class="hljs-keyword">FROM</span><br>    (<br>        <span class="hljs-comment">-- 聚合每分钟数据形成HLL数据结构</span><br>        <span class="hljs-keyword">SELECT</span><br>            DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:00&#x27;</span>) <span class="hljs-keyword">AS</span> `min_time`,<br>            `key_word`,<br>            hll_agg(`key2`) <span class="hljs-keyword">AS</span> min_hll<br>        <span class="hljs-keyword">FROM</span><br>            `dwd_log`<br>        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>            DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:00&#x27;</span>),<br>            `key_word`<br>    ) a;<br></code></pre></td></tr></table></figure><ul><li>在Flink中HLL不是预定义的数据结构, 所以累加器中需要将其视为<code>RAW</code>数据格式，利用<code>KYRO</code>序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HLLBuffer</span> &#123;<br><br>    <span class="hljs-meta">@DataTypeHint(allowRawGlobally = HintFlag.TRUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">HLL</span> <span class="hljs-variable">hll</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HLL</span>(<span class="hljs-number">11</span>, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这样我们就利用udf引入新的数据结构，扩展了SQL的表达能力~</li></ul><h1>Python UDF</h1><p>有时我们需要结合Python生态去实现动态执行、模型预测等功能，这个时候就可以引入Python UDF解决。这里我们以经典的鸢尾花机器学习分类为例。</p><ul><li>原理<ul><li>进程模式：Python函数和Java算子之间采用Grpc服务通信 <img src="https://nightlies.apache.org/flink/flink-docs-master/fig/pyflink_process_execution_mode.png#id=RQ3s2&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li><li>线程模式：Python函数和Java算子运行在同一个进程，利用<a href="https://syntomic.github.io/2023/02/25/Java%E8%B0%83%E7%94%A8Python/">FFI通信</a><br><img src="https://nightlies.apache.org/flink/flink-docs-release-1.17/fig/pyflink_embedded_execution_mode.png#id=KRU4p&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><ul><li>这样可以减少进程间序列化的开销，提升性能</li></ul></li></ul></li><li>实现：<ul><li>实现相应Python类，导入模型进行预测</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoUDF</span>(<span class="hljs-title class_ inherited__">ScalarFunction</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self, function_context: FunctionContext</span>):<br>        self.model = joblib.load(path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eval</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">return</span> self.model.predict(np.array(value).reshape(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)).tolist()[<span class="hljs-number">0</span>]<br><br><br>demo_udf = udf(DemoUDF(), result_type=DataTypes.INT())<br></code></pre></td></tr></table></figure><ul><li>注册Python UDF</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;python.files&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;./qflink-python/src/main/python/q-pyflink/udf&#x27;</span>;<br><span class="hljs-comment">-- 保证python算子获得足够资源</span><br><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;pipeline.operator-chaining&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;false&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;python.execution-mode&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;thread&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">FUNCTION</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> demo_udf <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;scalar.demo_udf.demo_udf&#x27;</span> <span class="hljs-keyword">LANGUAGE</span> PYTHON;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `source` (<br>    `sepal_length` <span class="hljs-type">FLOAT</span>,<br>    `sepal_width` <span class="hljs-type">FLOAT</span>,<br>    `petal_length` <span class="hljs-type">FLOAT</span>,<br>    `petal_width` <span class="hljs-type">FLOAT</span><br>) <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;connector&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;datagen&#x27;</span>,<br>    <span class="hljs-string">&#x27;rows-per-second&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br>);<br><br><span class="hljs-keyword">SELECT</span><br>    demo_udf(<span class="hljs-keyword">ARRAY</span>[`sepal_length`, `sepal_width`, `petal_length`, `petal_width`]) <span class="hljs-keyword">AS</span> `<span class="hljs-keyword">classifier</span>`<br><span class="hljs-keyword">FROM</span><br>    `source`;<br></code></pre></td></tr></table></figure><blockquote><p>注: 需提前创建Python虚拟环境，安装pyflink依赖且激活；若Python算子是CPU密集型任务，则需调整TM CPU个数</p></blockquote><h1>Summary</h1><p>大数据技术发展日新月异，但_SQL NEVER DIE_ ！本文讨论了如何利用UDF来来提升SQL的表达能力，希望可以提升你对<code>SQL Is ALL Your Need</code>的信心。但技术没有银弹，SQL不可能解决所有的问题。不管是SQL还是底层API，其实都是解决问题的方式，需要根据具体问题采用合适的工具，甚至可以<a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/table/data_stream_api/">结合SQL的通用性以及底层API的灵活性</a>来优雅地解决问题~</p><blockquote><p>本文所有SQL代码可参考：<a href="https://github.com/syntomic/qflink/tree/main/qflink-sql/qflink-sql-sdk/src/test/resources/sqls/sql_is_all_your_need/flink_sql_udf">SQL IS ALL Your Need: Flink SQL UDF</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Flink SQL</tag>
      
      <tag>Paimon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Is All Your Need: Flink SQL</title>
    <link href="/2023/04/28/SQL-Is-All-Your-Need-Flink-SQL/"/>
    <url>/2023/04/28/SQL-Is-All-Your-Need-Flink-SQL/</url>
    
    <content type="html"><![CDATA[<p>大数据开发简单地说就是从一个存储系统经过计算引擎的加工到另外一个存储系统的过程，如果把存储系统抽象为一张表，利用SQL进行处理，那么其实就和传统的数据库查询没有本质的区别。本篇文章利用<a href="https://paimon.apache.org/docs/master/concepts/overview/">Paimon</a>和<a href="https://nightlies.apache.org/flink/flink-docs-release-1.17/docs/dev/table/sql/gettingstarted/">Flink SQL</a>实现数据开发相关示例，迈向SQL Is All Your Need的第一步。</p><span id="more"></span><h1>Prepare</h1><p>数据收集不在我们这篇文章的讨论范围之内，这里我们假设已经有一张不断插入的包含原始日志数据的paimon表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用paimon catalog记录元数据信息</span><br><span class="hljs-keyword">CREATE</span> CATALOG my_catalog <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;type&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;paimon&#x27;</span>,<br>    <span class="hljs-string">&#x27;warehouse&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;file:/tmp/paimon&#x27;</span><br>);<br>USE CATALOG my_catalog;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ods_log (<br>    log STRING<br>) <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-comment">-- 只考虑INSERT的情况</span><br>    <span class="hljs-string">&#x27;write-mode&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;append-only&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>其中每条数据形如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2023</span>-<span class="hljs-number">04</span>-<span class="hljs-number">09</span> <span class="hljs-number">15</span>:<span class="hljs-number">40</span>:<span class="hljs-number">05</span> stdout &#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;val1&quot;</span>&#125;<br><span class="hljs-attribute">2023</span>-<span class="hljs-number">04</span>-<span class="hljs-number">09</span> <span class="hljs-number">15</span>:<span class="hljs-number">41</span>:<span class="hljs-number">05</span> stdout &#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;val2&quot;</span>&#125;<br><span class="hljs-attribute">2023</span>-<span class="hljs-number">04</span>-<span class="hljs-number">09</span> <span class="hljs-number">15</span>:<span class="hljs-number">42</span>:<span class="hljs-number">05</span> stdout &#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;val2&quot;</span>&#125;<br><span class="hljs-attribute">2023</span>-<span class="hljs-number">04</span>-<span class="hljs-number">09</span> <span class="hljs-number">15</span>:<span class="hljs-number">43</span>:<span class="hljs-number">05</span> stdout &#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;val3&quot;</span>&#125;<br><span class="hljs-attribute">2023</span>-<span class="hljs-number">04</span>-<span class="hljs-number">09</span> <span class="hljs-number">15</span>:<span class="hljs-number">44</span>:<span class="hljs-number">05</span> stdout &#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">6</span>,<span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;val4&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h1>ETL</h1><p>原始日志数据一般不能直接使用，需要先进行结构化清洗，利用Flink实时处理能力，我们可以构造持续的数据管道进行加工:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `dwd_log` (<br>    `<span class="hljs-type">time</span>` STRING,<br>    `key_word` STRING,<br>    `key1` <span class="hljs-type">INT</span>,<br>    `key2` STRING,<br>    <span class="hljs-comment">-- 定义事件时间和watermark以缓解数据乱序的对下游计算的影响</span><br>    `rowtime` <span class="hljs-keyword">AS</span> TO_TIMESTAMP_LTZ(UNIX_TIMESTAMP(`<span class="hljs-type">time</span>`), <span class="hljs-number">0</span>),<br>    WATERMARK <span class="hljs-keyword">FOR</span> `rowtime` <span class="hljs-keyword">AS</span> `rowtime` <span class="hljs-operator">-</span> <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;10&#x27;</span> <span class="hljs-keyword">SECOND</span><br>) <span class="hljs-keyword">WITH</span> (<br>    <span class="hljs-string">&#x27;write-mode&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;append-only&#x27;</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `dwd_log`<br><span class="hljs-keyword">SELECT</span><br>    REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> `<span class="hljs-type">time</span>`,<br>    REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> `key_word`,<br><br>    <span class="hljs-built_in">JSON_VALUE</span>(REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;$.key1&#x27;</span> RETURNING <span class="hljs-type">INT</span>) <span class="hljs-keyword">AS</span> `key1`,<br>    <span class="hljs-built_in">JSON_VALUE</span>(REGEXP_EXTRACT(`log`, <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (.*?) (.*)&#x27;</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;$.key2&#x27;</span>) <span class="hljs-keyword">AS</span> `key2`<br><span class="hljs-keyword">FROM</span><br>    `ods_log`;<br></code></pre></td></tr></table></figure><blockquote><p>作为一个有洁癖的程序员，一个正则表达式和json函数重复使用显然是不可接受的，需要思考一下如何简化我们的SQL？</p></blockquote><h1>Analysis</h1><p>有了结构化的数据，我们就可以基于此计算指标并做一些分析，比如计算每一分钟的指标汇总值。这里我们利用Flink SQL的Windowing TVFs实现：</p><p><img src="https://nightlies.apache.org/flink/flink-docs-master/fig/tumbling-windows.svg#id=LPjZp&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> dws_metric (<br>    `window_start` STRING,<br>    `window_end` STRING,<br>    `dim` STRING,<br>    `metric` <span class="hljs-type">BIGINT</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`window_start`, `window_end`, `dim`) <span class="hljs-keyword">NOT</span> ENFORCED<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dws_metric<br><span class="hljs-keyword">SELECT</span><br>    DATE_FORMAT(`window_start`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    DATE_FORMAT(`window_end`, <span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) <span class="hljs-keyword">AS</span> `window_end`,<br>    `key_word` <span class="hljs-keyword">AS</span> `dim`,<br>    <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> `key2`) <span class="hljs-keyword">AS</span> `metric`<br><span class="hljs-keyword">FROM</span><br>    <span class="hljs-comment">-- Windowing TVFs</span><br>    <span class="hljs-keyword">TABLE</span>(TUMBLE(<span class="hljs-keyword">TABLE</span> `dwd_log`, DESCRIPTOR(`rowtime`), <span class="hljs-type">INTERVAL</span> <span class="hljs-string">&#x27;1&#x27;</span> MINUTES))<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `key_word`, `window_start`, `window_end`;<br></code></pre></td></tr></table></figure><blockquote><p>实际生产过程中，可能遇到性能问题，Flink也提供了相应<a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/table/tuning/">性能调优</a>的方法，比如<code>MiniBatch</code>, <code>Local-Global</code>, <code>Split Distinct</code>等。</p></blockquote><h2 id="Batch">Batch</h2><p>之前我们都是默认使用的实时数据流，但有时实时流可能出现问题，这时一般采用离线修正的方法。因为Paimon + Flink组成了流批一体的存储计算，避免了传统Lambda架构在不同存储和计算引擎之间代码切换的麻烦，这里只需要添加一行代码切换成批执行即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;execution.runtime-mode&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;batch&#x27;</span>;<br><br>...<br></code></pre></td></tr></table></figure><p>这样我们才是真正的实现了流批一体：使用同一套API、同一套开发范式来实现大数据的流计算和批计算，进而保证处理过程与结果的一致性。同时paimon的更新能力，给了数据处理更多的可能性~</p><blockquote><p>注意：批计算时会将所有窗口触发，而流计算时只会触发watermark到达的窗口。</p></blockquote><h1>Event Driven</h1><p>实时场景中的另外一类重要的应用就是事件驱动型应用，典型的就是监控风控场景。这里我们以监控每天的累积指标为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 设置状态过期时间</span><br><span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;table.exec.state.ttl&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2 d&#x27;</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `dws_alert` (<br>    `window_start` STRING,<br>    `key` STRING,<br>    `<span class="hljs-type">time</span>` STRING,<br>    `metric` <span class="hljs-type">BIGINT</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`window_start`, `key`) <span class="hljs-keyword">NOT</span> ENFORCED<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `dws_alert`<br><span class="hljs-keyword">SELECT</span><br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyyMMdd&#x27;</span>) <span class="hljs-keyword">AS</span> `window_start`,<br>    `key_word` <span class="hljs-keyword">AS</span> `key`,<br>    <span class="hljs-built_in">MAX</span>(`<span class="hljs-type">time</span>`) <span class="hljs-keyword">AS</span> `<span class="hljs-type">time</span>`,<br>    <span class="hljs-built_in">SUM</span>(`key1`) <span class="hljs-keyword">AS</span> `metric`<br><span class="hljs-keyword">FROM</span><br>    `dwd_log`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    DATE_FORMAT(`<span class="hljs-type">time</span>`, <span class="hljs-string">&#x27;yyyyMMdd&#x27;</span>), `key_word`<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(`key1`) <span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><blockquote><p>虽然利用SQL开发逻辑简单，但监控规则和阈值等不可以变动，如果采用不同任务执行不同规则，那就会极大的浪费计算资源，这时就需要思考如何支持动态规则？</p></blockquote><h2 id="CEP">CEP</h2><p>Flink SQL也提供了复杂事件处理的能力，我们可以利用 MATCH_RECOGNIZE 子句实现更复杂的应用。这里以求单一日志字段取值不断下降的时期为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> dwd_log<br>    <span class="hljs-keyword">MATCH_RECOGNIZE</span> (<br>        <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> key_word<br>        <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> rowtime<br>        MEASURES<br>            START_ROW.rowtime <span class="hljs-keyword">AS</span> start_ts,<br>            <span class="hljs-keyword">LAST</span>(VAL_DOWN.rowtime) <span class="hljs-keyword">AS</span> bottom_ts,<br>            <span class="hljs-keyword">LAST</span>(VAL_UP.rowtime) <span class="hljs-keyword">AS</span> end_ts<br>        <span class="hljs-keyword">ONE</span> <span class="hljs-type">ROW</span> <span class="hljs-keyword">PER</span> <span class="hljs-keyword">MATCH</span><br>        AFTER <span class="hljs-keyword">MATCH</span> <span class="hljs-keyword">SKIP</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">LAST</span> VAL_UP<br>        <span class="hljs-keyword">PATTERN</span> (START_ROW VAL_DOWN<span class="hljs-operator">+</span> VAL_UP)<br>        <span class="hljs-keyword">DEFINE</span><br>            VAL_DOWN <span class="hljs-keyword">AS</span><br>                (<span class="hljs-keyword">LAST</span>(VAL_DOWN.key1, <span class="hljs-number">1</span>) <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">AND</span> VAL_DOWN.key1 <span class="hljs-operator">&lt;</span> START_ROW.key1) <span class="hljs-keyword">OR</span><br>                    VAL_DOWN.key1 <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">LAST</span>(VAL_DOWN.key1, <span class="hljs-number">1</span>),<br>            VAL_UP <span class="hljs-keyword">AS</span><br>                VAL_UP.key1 <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">LAST</span>(VAL_DOWN.key1, <span class="hljs-number">1</span>)<br>    ) MR;<br></code></pre></td></tr></table></figure><p>虽然需要重新学习<a href="https://nightlies.apache.org/flink/flink-docs-release-1.17/docs/dev/table/sql/queries/match_recognize/">模式匹配相关语法</a>，这会导致SQL越来越复杂，但这也说明随着SQL标准的不断发展，SQL的表达能力也在不断地完善。</p><h1>Funny Fact</h1><blockquote><p><a href="https://stackoverflow.com/questions/900055/is-sql-or-even-tsql-turing-complete">SQL是图灵完备的</a></p></blockquote><p>虽然 SQL Is All Your Need 只是一个口号，也不会有人只用SQL去完成一些复杂灵活的任务，但如果只是单纯地从理论上来讲，这也是正确的～</p><h1>Summary</h1><p>本篇文章介绍了如何用统一的技术栈实现大数据开发，虽然只是一些简单的示例，但随着大数据的发展，技术正在逐渐走向融合，相信SQL Is All Your Need的未来～</p><blockquote><p>本文所有代码可参考：<a href="https://github.com/syntomic/qflink/tree/main/qflink-sql/qflink-sql-sdk/src/test/resources/sqls/sql_is_all_your_need/flink_sql">SQL IS ALL Your Need: Flink SQL</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Flink SQL</tag>
      
      <tag>Paimon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人开发环境配置</title>
    <link href="/2023/03/05/%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/03/05/%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>工欲善其事必先利其器, 一个良好的开发环境可以大大提高编程效率。本篇文章将会分享安装相应工具来帮助我们提高效率~</p><span id="more"></span><h1>单机环境</h1><h2 id="WSL">WSL</h2><p>Linux系统提供了更友好方便的开发环境，如果你现在正在使用Windows系统，可以尝试使用<a href="https://learn.microsoft.com/zh-cn/windows/wsl/about">Windows Subsystem Linux(WSL)</a>开发。</p><h3 id="安装">安装</h3><ol><li>打开PowerShell安装Ubuntu-22.04</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--help</span><br>wsl <span class="hljs-literal">--install</span> Ubuntu<span class="hljs-literal">-22</span>.<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你觉得PowerShell不好用，可以尝试安装<a href="https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=zh-cn">Windows Terminal</a></p></blockquote><ol start="2"><li>替换apt源:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak<br>sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><ul><li>添加以下软件仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span><br>deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span><br>deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在较新的操作系统版本的软件包的新版本</span><br>deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>Free software</th><th>Non-free software</th></tr></thead><tbody><tr><td>Supported</td><td>Main</td><td>Restricted</td></tr><tr><td>Unsupported</td><td>Universe</td><td>Multiverse</td></tr></tbody></table><ol start="3"><li>更新并安装基础软件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新软件列表</span><br>sudo apt-get update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新软件包</span><br>sudo apt-get upgrade<br>sudo apt-get install build-essential<br></code></pre></td></tr></table></figure><h3 id="Trouble-Shooting">Trouble Shooting</h3><ol><li>wsl默认安装在C盘中，当wsl中数据越来越多时，会导致C盘容量不足，这个时候我们可以将wsl迁移到其他磁盘中</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--list</span> <span class="hljs-literal">-v</span><br>wsl <span class="hljs-literal">--terminate</span> Ubuntu<span class="hljs-literal">-22</span>.<span class="hljs-number">04</span><br>wsl <span class="hljs-literal">--export</span> Ubuntu<span class="hljs-literal">-22</span>.<span class="hljs-number">04</span> <span class="hljs-string">&quot;D:\wsl_export\ubuntu-ex.tar&quot;</span><br>wsl <span class="hljs-literal">--unregister</span> Ubuntu<span class="hljs-literal">-22</span>.<span class="hljs-number">04</span><br>wsl <span class="hljs-literal">--import</span> Ubuntu<span class="hljs-literal">-22</span>.<span class="hljs-number">04</span> <span class="hljs-string">&quot;D:\wsl_import\ubuntu&quot;</span> <span class="hljs-string">&quot;D:\wsl_export\ubuntu-ex.tar&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>wsl中使用windows代理, 创建文件<code>%USERPROFILE%\.wslconfig</code>, 详见<a href="https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config#configuration-settings-for-wslconfig">配置说明</a>:</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[experimental]</span><br><span class="hljs-attr">autoMemoryReclaim</span>=gradual  <span class="hljs-comment"># gradual  | dropcache | disabled</span><br><span class="hljs-attr">networkingMode</span>=mirrored<br><span class="hljs-attr">dnsTunneling</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">firewall</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">autoProxy</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="Oh-My-Zsh">Oh My Zsh</h2><p>Linux默认的bash shell虽然在功能已经比较完善了，但如果你想更加个性化一点，可以尝试使用下<a href="https://ohmyz.sh/">Oh My Zsh</a>~</p><h3 id="安装zsh">安装zsh</h3><ol><li>安装zsh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install zsh<br></code></pre></td></tr></table></figure><ol start="2"><li>安装oh my zsh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li>安装插件: 在<code>~/.zshrc</code>文件中更新配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">plugins=(<br>    git<br>    # 解压: x file<br>    extract<br>    # 目录跳转：z dir<br>    z<br>    # 自动补全<br>    zsh-autosuggestions<br>    # 高亮命令<br>    zsh-syntax-highlighting<br>)<br></code></pre></td></tr></table></figure><ul><li>自动补全</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><ul><li>高亮命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><blockquote><p>若github连接不上，可使用gitee镜像：<a href="https://gitee.com/mirrors/%7Bproject%7D">https://gitee.com/mirrors/{project}</a></p></blockquote><h3 id="Trouble-Shooting-2">Trouble Shooting</h3><ol><li>无root权限时安装<code>zsh</code><ul><li>源码编译安装</li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download<br>mkdir zsh &amp;&amp; unxz zsh.tar.xz &amp;&amp; tar -xvf zsh.tar -C zsh --strip-components 1<br>cd zsh<br><br>./configure --prefix=$HOME<br>make<br>make install<br></code></pre></td></tr></table></figure><ul><li>若出现依赖错误，依然可以源码安装相应依赖，比如<code>configure: error: &quot;No terminal handling library was found on your system. This is probably a library called curses or ncurses. You may need to install a package called 'curses-devel' or 'ncurses-devel' on your system&quot;</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.1.tar.gz<br>tar xvfz ncurses-6.1.tar.gz<br>cd ncurses-6.1<br>./configure --prefix=$HOME --with-shared<br>make<br>make install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装zsh时需要找到相应动态库</span><br>export CPPFLAGS=&quot;-I$HOME/include&quot; LDFLAGS=&quot;-L$HOME/lib&quot;<br></code></pre></td></tr></table></figure><h2 id="Homebrew">Homebrew</h2><p>Ubuntu原生的包管理软件<code>apt</code>不是特别好用，有很多最新的软件包都找不到，这个时候可以安装<a href="https://brew.sh/">Homebrew</a>获取最新软件包，尤其在MacOS平台上~</p><h3 id="安装-2">安装</h3><ol><li>脚本自动安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>配置镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;export HOMEBREW_API_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles/api&#x27; &gt;&gt; ~/.zshrc<br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc<br>echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=https://mirrors.aliyun.com/homebrew/brew.git&#x27; &gt;&gt; ~/.zshrc<br>echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=https://mirrors.aliyun.com/homebrew/homebrew-core.git&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br><br>brew update<br></code></pre></td></tr></table></figure><h3 id="Trouble-Shooting-3">Trouble Shooting</h3><ol><li>安装maven时会自动安装openjdk依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install --ignore-dependencies maven<br></code></pre></td></tr></table></figure><h2 id="Python">Python</h2><p>Ubuntu系统默认安装了<code>Python3</code>，但实际情况下需要许多虚拟环境，这里我们可以利用<a href="https://docs.conda.io/en/latest/miniconda.html">conda</a>进行统一管理~</p><h3 id="安装-3">安装</h3><ol><li>脚本自动安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<br>sh Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><ol start="2"><li>设置pip镜像源</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple<br>pip config set install.trusted-host mirrors.aliyun.com<br></code></pre></td></tr></table></figure><ol start="3"><li>虚拟环境管理</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --name tmp python=3.11 -y<br>conda remove -n tmp --all<br></code></pre></td></tr></table></figure><h2 id="Java">Java</h2><p>JDK有很多的实现，这里我们以<a href="https://openjdk.org/install/">OpenJDK</a>为例安装，如果需要Oracle JDK的话，直接去<a href="https://www.oracle.com/il-en/java/technologies/downloads/#java17">Oracle官网</a>下载相应压缩包，将其解压到相应目录并设置好环境变量即可~</p><h3 id="安装-4">安装</h3><ol><li><code>apt</code>安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install openjdk-17-jdk<br>sudo apt install maven<br></code></pre></td></tr></table></figure><ol start="2"><li>配置镜像: <code>~/.m2/settings.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>spring<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="VSCode">VSCode</h2><p><a href="https://code.visualstudio.com/">VSCode</a>繁荣的插件系统，可以让我们只需一个IDE就能完成全部工作，避免在不同工具之间切换的麻烦~</p><h3 id="安装-5">安装</h3><p>直接去<a href="https://code.visualstudio.com/">官网</a>下载相应软件包安装即可</p><h3 id="插件">插件</h3><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">远程开发</a></li></ol><ul><li>配置本地ssh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa<br>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br>chmod 0600 ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><ul><li>连接远程机器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">可将本地公钥复制到远程主机的authorized_keys中，避免重复输入密码连接</span><br>ssh $&#123;user&#125;@$&#123;ip&#125; -A<br></code></pre></td></tr></table></figure><ul><li>配置默认shell</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;terminal.integrated.profiles.linux&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;zsh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;ZSH_PATH&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;terminal.integrated.defaultProfile.linux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zsh&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;terminal.integrated.shell.linux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;ZSH_PATH&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;terminal.integrated.automationProfile.linux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;ZSH_PATH&#125;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack">Extension Pack for Java</a></li></ol><ul><li>java配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;java.jdt.ls.java.home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;JAVA_LS_PATH&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;java.configuration.runtimes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-1.8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;JAVA_8_PATH&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-11&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;JAVA_11_PATH&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-17&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;JAVA_17_PATH&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>其他<ul><li>Better Comments</li><li>Code Spell Checker</li><li>Git Graph</li><li>SonarLint</li></ul></li></ol><h1>容器环境</h1><h2 id="Docker">Docker</h2><p>从上面单机的配置可以看出来，开发环境配置其实是很耗时耗力的，幸好<a href="https://docs.docker.com/engine/install/ubuntu/">Docker</a>为我们封装好了现成的容器环境，可以开箱即用~</p><h3 id="安装-6">安装</h3><ol><li>脚本自动安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL get.docker.com -o get-docker.sh<br>sudo sh get-docker.sh --mirror Aliyun<br></code></pre></td></tr></table></figure><ol start="2"><li>建立docker用户组</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo groupadd docker<br>sudo usermod -aG docker $USER<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新登陆生效</span><br>logout<br></code></pre></td></tr></table></figure><ol start="3"><li>设置镜像加速: 在文件<code>/etc/docker/daemon.json</code>添加</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>  &quot;registry-mirrors&quot;: [<br>    &quot;https://hub-mirror.c.163.com&quot;,<br>    &quot;https://mirror.baidubce.com&quot;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images">阿里云镜像地址获取</a></p></blockquote><ol start="4"><li>启动docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">自启动</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> docker</span><br>sudo systemctl start docker<br>docker run --rm hello-world<br></code></pre></td></tr></table></figure><ol start="5"><li>安装docker-compose</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -SL https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br>docker-compose version<br></code></pre></td></tr></table></figure><h2 id="k8s">k8s</h2><p>Docker帮我们封装好了应用，而<a href="https://kubernetes.io/docs/tutorials/hello-minikube/">k8s</a>帮我们封装好了集群。</p><h3 id="安装-7">安装</h3><ol><li>脚本自动安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64<br>sudo install minikube-linux-amd64 /usr/local/bin/minikube<br></code></pre></td></tr></table></figure><ol start="2"><li>启动集群</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用镜像加速</span><br>minikube start --image-mirror-country=cn --kubernetes-version=1.23.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装kubectl</span><br>minikube kubectl -- get po -A<br>alias kubectl=&quot;minikube kubectl --&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li>部署应用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl create deployment hello-minikube --image=kicbase/echo-server:1.0<br>kubectl expose deployment hello-minikube --type=NodePort --port=8080<br>minikube service hello-minikube<br></code></pre></td></tr></table></figure><ol start="4"><li>集群管理</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl delete service hello-minikube<br>kubectl delete deployment hello-minikube<br>minikube stop<br></code></pre></td></tr></table></figure><h1>总结</h1><p>因为基本上都是国外的软件，直接下载的话速度会很慢甚至访问不了，这就要求我们学会配置镜像，或者学会科学上网。。</p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java调用Python</title>
    <link href="/2023/02/25/Java%E8%B0%83%E7%94%A8Python/"/>
    <url>/2023/02/25/Java%E8%B0%83%E7%94%A8Python/</url>
    
    <content type="html"><![CDATA[<p>每个编程语言都有其适用的范围，当人们需要结合不同的生态去完成一些功能时，就会遇到不同语言通信的问题，本篇文章我们结合一个具体示例，展示如何通过FFI语言交互接口实现在Java中调用Python。</p><span id="more"></span><h1>Why</h1><ul><li>主要有下面两种原因：<ul><li>使用方式：例如采用Java开发的平台希望给用户提供易用的Python接口</li><li>生态集成：例如将Java中的分布式能力和Python的AI生态相结合</li></ul></li></ul><h1>How</h1><ul><li>现如今有如下的解决方案：<ul><li>IPC方案: 比如<a href="https://www.py4j.org/">Py4J</a><ul><li>问题：因为涉及到进程间通信以及序列化，所以会有性能问题</li></ul></li><li>Python运行在JVM的方案：比如<a href="https://www.jython.org/">Jython</a><ul><li>问题：因为CPython现在是主流，所以会有兼容性问题</li></ul></li><li>FFI(Foreign Function Interface): 比如<a href="https://github.com/alibaba/pemja">Pemja</a></li></ul></li></ul><p><img src="https://image-host.obs.cn-east-2.myhuaweicloud.com/articles/ffi.png" alt=""></p><ul><li>本篇文章我们将给出一个示例说明如何使用FFI。</li></ul><h1>Prepare</h1><ul><li>首先需要安装以下环境，如遇到安装问题可以和ChatGPT聊一下~<ul><li>编程语言<ul><li>Java: 1.8</li><li>Python: 3.9</li><li>C：c99</li></ul></li><li>编译与链接<ul><li>gcc：动态链接</li></ul></li></ul></li></ul><blockquote><p>由于笔者开发环境采用MacOS + x86平台，所以以下教程只对此平台有效，后续再补上其他环境的相应命令</p></blockquote><h1>Learn By Doing</h1><p><strong><em>目标：Java传入日期参数, 由Python返回星期几</em></strong></p><ol><li>编写主体Java代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.syntomic.ffi;<br><br><span class="hljs-comment">/** Foreign function interface demo */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FFIDemo</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.load(System.getenv(<span class="hljs-string">&quot;LIBPYTHON&quot;</span>));<br>        System.load(String.format(<span class="hljs-string">&quot;%s/FFIDemo.dylib&quot;</span>, System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FFIDemo</span>().dayOfWeek(<span class="hljs-string">&quot;1994-05-05&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 本地方法判断日期是星期几</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date 日期</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dayOfWeek</span><span class="hljs-params">(String date)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以看出我们需要首先导入两个共享库<ul><li>运行Python所需的libpython库: 可以利用<a href="https://pypi.org/project/find-libpython/">find-libpython</a>得出</li><li>本地方法实现后的动态FFIDemo库：之后会介绍如何编译生成</li></ul></li></ul><ol start="2"><li>生成Header文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac -h src/main/c/cn/syntomic/ffi/include src/main/java/cn/syntomic/ffi/FFIDemo.java<br></code></pre></td></tr></table></figure><ul><li>观察生成的文件会发现我们需要实现一个C方法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">JNIEXPORT jint JNICALL <span class="hljs-title function_">Java_cn_syntomic_ffi_FFIDemo_dayOfWeek</span><br><span class="hljs-params">(JNIEnv *, jobject, jstring)</span>;<br></code></pre></td></tr></table></figure><ul><li>方法名: 由Java包名+类名+方法名组成</li><li>方法参数<ul><li><code>JNIEnv</code>: 通过这个指针可以从运行的JVM中访问所需的类、对象、字段和方法</li><li><code>jobject</code>: 方法所属于的Java对象</li><li><code>jstring</code>: C JNI类型，详细对应可见<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jni/types.html">JNI Types</a></li></ul></li></ul><ol start="3"><li>Python模块实现: 直接调用Python函数实现</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">day_of_week</span>(<span class="hljs-params">date</span>):<br>    <span class="hljs-keyword">return</span> datetime.strptime(date, <span class="hljs-string">&quot;%Y-%d-%m&quot;</span>).weekday() + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr><p><strong>一点数学</strong>：如果要直接去计算星期几，可以利用数论中Zeller公式</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>w</mi><mo>=</mo><mi>y</mi><mo>+</mo><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>c</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">]</mo><mo>−</mo><mn>2</mn><mi>c</mi><mo>+</mo><mo stretchy="false">[</mo><mn>26</mn><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>10</mn><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">w=y+[y/4]+[c/4]-2c+[26(m+1)/10]+d-1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord">/4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">26</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/10</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>所以<code>1994-05-05</code>这个日期的就是星期四：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>4</mn><mo>=</mo><mo stretchy="false">(</mo><mn>94</mn><mo>+</mo><mo stretchy="false">[</mo><mn>94</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mn>19</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">]</mo><mo>−</mo><mn>2</mn><mo>∗</mo><mn>19</mn><mo>+</mo><mo stretchy="false">[</mo><mn>26</mn><mo>∗</mo><mo stretchy="false">(</mo><mn>5</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>10</mn><mo stretchy="false">]</mo><mo>+</mo><mn>5</mn><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>7</mn></mrow><annotation encoding="application/x-tex">4 = (94+[94/4]+[19/4]-2 * 19+[26 * (5+1) / 10 ]+5-1) \mod 7 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">94</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">94/4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">19/4</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">19</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">26</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/10</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span></span></span></span></span></p><hr><ol start="4"><li>将Python嵌入到C中</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">JNIEXPORT jint JNICALL <span class="hljs-title function_">Java_cn_syntomic_ffi_FFIDemo_dayOfWeek</span><br>  <span class="hljs-params">(JNIEnv* env, jobject thisObject, jstring date)</span> &#123;<br>    <span class="hljs-type">int</span> weekOfDay;<br><br>    <span class="hljs-comment">// 初始化python解释器</span><br>    Py_Initialize();<br><br>    <span class="hljs-comment">// 导入实现Python函数</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pName = <span class="hljs-string">&quot;day_of_week&quot;</span>;<br>    PyRun_SimpleString(<span class="hljs-string">&quot;import sys&quot;</span>);<br>    PyRun_SimpleString(<span class="hljs-string">&quot;sys.path.append(&#x27;./src/main/python/cn/syntomic/ffi&#x27;)&quot;</span>);<br>    PyObject* pModule = PyImport_Import(PyUnicode_FromString(pName));<br>    PyObject* pFunc = PyObject_GetAttrString(pModule, pName);<br><br>    <span class="hljs-comment">// java类型转化为python参数</span><br>    PyObject* pArgs = PyTuple_New(<span class="hljs-number">1</span>);<br>    PyTuple_SetItem(pArgs, <span class="hljs-number">0</span>, PyUnicode_FromString((*env)-&gt;GetStringUTFChars(env, date, <span class="hljs-literal">NULL</span>)));<br><br>    <span class="hljs-comment">// 调用python函数</span><br>    PyObject* pValue = PyObject_CallObject(pFunc, pArgs);<br>    weekOfDay = PyLong_AsLong(pValue);<br><br>    <span class="hljs-comment">// 关闭python解释器</span><br>    <span class="hljs-keyword">if</span> (Py_FinalizeEx() &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">120</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> weekOfDay;<br>  &#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>编译与运行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=$&#123;JAVA_HOME&#125;<br>export PYTHONHOME=$&#123;PYTHONHOME&#125;<br>export LIBPYTHON=$&#123;LIBPYTHON&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译</span><br>gcc -c -fPIC -I$&#123;JAVA_HOME&#125;/include -I$&#123;JAVA_HOME&#125;/include/darwin -I$&#123;PYTHONHOME&#125;/include/python3.9 -I$&#123;PYTHONHOME&#125;/include src/main/c/cn/syntomic/ffi/cn_syntomic_ffi_FFIDemo.c -o FFIDemo.o<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成动态链接库</span><br>gcc -dynamiclib -L$&#123;PYTHONHOME&#125;/lib -lpython3.9 -ldl -o FFIDemo.dylib FFIDemo.o<br><br>javac -d target/classes/cn/syntomic/ffi src/main/java/cn/syntomic/ffi/FFIDemo.java<br>java -cp target/classes cn.syntomic.ffi.FFIDemo<br></code></pre></td></tr></table></figure><ul><li>最终就会输出</li></ul><blockquote><p>4</p></blockquote><h1>Summary</h1><p>本篇文章我们以一个示例展示如何使用FFI，详细代码参考<a href="https://github.com/syntomic/ffi_demo">ffi_demo</a>, 深入研究的话可以参考<a href="https://github.com/alibaba/pemja">Pemja</a></p><h1>Refer</h1><ol><li><a href="https://www.baeldung.com/jni">Guide to JNI</a></li><li><a href="https://docs.python.org/3/extending/embedding.html">Embedding Python in Another Application</a></li><li><a href="https://developer.aliyun.com/article/902591">基于 FFI 的 PyFlink 下一代 Python 运行时介绍</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>FFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
