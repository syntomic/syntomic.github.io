<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java调用Python</title>
    <link href="/2023/02/25/Java%E8%B0%83%E7%94%A8Python/"/>
    <url>/2023/02/25/Java%E8%B0%83%E7%94%A8Python/</url>
    
    <content type="html"><![CDATA[<p>每个编程语言都有其适用的范围，当人们需要在结合不同生态去完成一些功能时，就会遇到不同语言通信的问题，本篇文章我们结合一个具体示例，展示如何通过FFI语言交互接口实现在Java中调用Python。</p><span id="more"></span><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>主要有下面两种原因：</p><ul><li>使用方式：例如采用Java开发的平台希望给用户提供易用的Python接口</li><li>生态集成：例如将Java中的分布式能力和Python的AI生态相结合</li></ul><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>现如今有如下的解决方案：</p><ul><li>IPC方案: 比如<a href="https://www.py4j.org/">Py4J</a><ul><li>问题：因为涉及到进程间通信以及序列化，所以会有性能问题</li></ul></li><li>Python运行在JVM的方案：比如<a href="https://www.jython.org/">Jython</a><ul><li>问题：因为CPython现在是主流，所以会有兼容性问题</li></ul></li><li>FFI(Foreign Function Interface): 比如<a href="https://github.com/alibaba/pemja">Pemja</a></li></ul><img src="/2023/02/25/Java%E8%B0%83%E7%94%A8Python/FFI.png" class="" title="FFI方案"><p>本篇文章我们将给出一个示例说明如何使用FFI。</p><h1 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h1><p>首先需要安装以下环境，如遇到安装问题可以和ChatGPT聊一下~</p><ul><li>编程语言<ul><li>Java: 1.8</li><li>Python: 3.9</li><li>C：c99</li></ul></li><li>编译与链接<ul><li>gcc：动态链接</li></ul></li></ul><blockquote><p>由于笔者开发环境采用MacOS + x86平台，所以以下教程只对此平台有效，后续再补上其他环境的相应命令</p></blockquote><h1 id="Learn-By-Doing"><a href="#Learn-By-Doing" class="headerlink" title="Learn By Doing"></a>Learn By Doing</h1><p><em><strong>目标：Java传入日期参数, 由Python返回星期几</strong></em></p><ol><li>编写主体Java代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> cn.syntomic.ffi;<br><br><span class="hljs-comment">/** Foreign function interface demo */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FFIDemo</span> &#123;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.load(System.getenv(<span class="hljs-string">&quot;LIBPYTHON&quot;</span>));<br>        System.load(String.format(<span class="hljs-string">&quot;%s/FFIDemo.dylib&quot;</span>, System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FFIDemo</span>().dayOfWeek(<span class="hljs-string">&quot;1994-05-05&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 本地方法判断日期是星期几</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date 日期</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dayOfWeek</span><span class="hljs-params">(String date)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li>可以看出我们需要首先导入两个共享库<ul><li>运行Python所需的<code>libpython</code>库: 可以利用<a href="https://pypi.org/project/find-libpython/">find-libpython</a>得出</li><li>本地方法实现后的动态<code>FFIDemo</code>库：之后会介绍如何编译生成</li></ul></li></ul><ol start="2"><li>生成Header文件<blockquote><p>javac -h src&#x2F;main&#x2F;c&#x2F;cn&#x2F;syntomic&#x2F;ffi&#x2F;include src&#x2F;main&#x2F;java&#x2F;cn&#x2F;syntomic&#x2F;ffi&#x2F;FFIDemo.java</p></blockquote></li></ol><ul><li>可见我们需要实现一个C方法  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">JNIEXPORT jint JNICALL <span class="hljs-title function_">Java_cn_syntomic_ffi_FFIDemo_dayOfWeek</span><br><span class="hljs-params">(JNIEnv *, jobject, jstring)</span>;<br></code></pre></td></tr></table></figure><ul><li>方法名: 由Java包名+类名+方法名组成</li><li>方法参数<ul><li><code>JNIEnv</code>: 通过这个指针可以从运行的JVM中访问所需的类、对象、字段和方法</li><li><code>jobject</code>: 方法所属于的Java对象</li><li><code>jstring</code>: C JNI类型，详细对应可见<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jni/types.html">JNI Types</a></li></ul></li></ul></li></ul><ol start="3"><li>Python模块实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">day_of_week</span>(<span class="hljs-params">date</span>):<br>    <span class="hljs-keyword">return</span> datetime.strptime(date, <span class="hljs-string">&quot;%Y-%d-%m&quot;</span>).weekday() + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ol><ul><li>这里我们直接调用Python函数实现</li></ul><hr><p>如果要直接去计算星期几，可以利用数论中Zeller公式</p><blockquote><p><code>w=y+[y/4]+[c/4]-2c+[26(m+1)/10]+d-1</code></p></blockquote><p>所以<code>1994-05-05</code>这个日期的就是星期4&#x3D;(94+[94&#x2F;4]+[19&#x2F;4]-2*19+[26 *(5+1)&#x2F;10 ]+5-1) % 7</p><hr><ol start="4"><li><p>将Python嵌入到C中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">JNIEXPORT jint JNICALL <span class="hljs-title function_">Java_cn_syntomic_ffi_FFIDemo_dayOfWeek</span><br>  <span class="hljs-params">(JNIEnv* env, jobject thisObject, jstring date)</span> &#123;<br>    <span class="hljs-type">int</span> weekOfDay;<br><br>    <span class="hljs-comment">// 初始化python解释器</span><br>    Py_Initialize();<br><br>    <span class="hljs-comment">// 导入实现Python函数</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pName = <span class="hljs-string">&quot;day_of_week&quot;</span>;<br>    PyRun_SimpleString(<span class="hljs-string">&quot;import sys&quot;</span>);<br>    PyRun_SimpleString(<span class="hljs-string">&quot;sys.path.append(&#x27;./src/main/python/cn/syntomic/ffi&#x27;)&quot;</span>);<br>    PyObject* pModule = PyImport_Import(PyUnicode_FromString(pName));<br>    PyObject* pFunc = PyObject_GetAttrString(pModule, pName);<br><br>    <span class="hljs-comment">// java类型转化为python参数</span><br>    PyObject* pArgs = PyTuple_New(<span class="hljs-number">1</span>);<br>    PyTuple_SetItem(pArgs, <span class="hljs-number">0</span>, PyUnicode_FromString((*env)-&gt;GetStringUTFChars(env, date, <span class="hljs-literal">NULL</span>)));<br><br>    <span class="hljs-comment">// 调用python函数</span><br>    PyObject* pValue = PyObject_CallObject(pFunc, pArgs);<br>    weekOfDay = PyLong_AsLong(pValue);<br><br>    <span class="hljs-comment">// 关闭python解释器</span><br>    <span class="hljs-keyword">if</span> (Py_FinalizeEx() &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">120</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> weekOfDay;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>编译与运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span><br><span class="hljs-built_in">export</span> PYTHONHOME=<span class="hljs-variable">$&#123;PYTHONHOME&#125;</span><br><span class="hljs-built_in">export</span> LIBPYTHON=<span class="hljs-variable">$&#123;LIBPYTHON&#125;</span><br><br><span class="hljs-comment"># 编译</span><br>gcc -c -fPIC -I<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/include -I<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/include/darwin -I<span class="hljs-variable">$&#123;PYTHONHOME&#125;</span>/include/python3.9 -I<span class="hljs-variable">$&#123;PYTHONHOME&#125;</span>/include src/main/c/cn/syntomic/ffi/cn_syntomic_ffi_FFIDemo.c -o FFIDemo.o<br><span class="hljs-comment"># 生成动态链接库</span><br>gcc -dynamiclib -L<span class="hljs-variable">$&#123;PYTHONHOME&#125;</span>/lib -lpython3.9 -ldl -o FFIDemo.dylib FFIDemo.o<br><br>javac -d target/classes/cn/syntomic/ffi src/main/java/cn/syntomic/ffi/FFIDemo.java<br>java -<span class="hljs-built_in">cp</span> target/classes cn.syntomic.ffi.FFIDemo<br></code></pre></td></tr></table></figure></li></ol><p>最终就会输出</p><blockquote><p>4</p></blockquote><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>本篇文章我们以一个示例展示如何使用FFI，详细代码参考<a href="https://github.com/syntomic/ffi_demo">ffi_demo</a>, 深入研究的话可以参考<a href="https://github.com/alibaba/pemja">Pemja</a></p><h1 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h1><ol><li><a href="https://www.baeldung.com/jni">Guide to JNI</a></li><li><a href="https://docs.python.org/3/extending/embedding.html">Embedding Python in Another Application</a></li><li><a href="https://developer.aliyun.com/article/902591">基于 FFI 的 PyFlink 下一代 Python 运行时介绍</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
